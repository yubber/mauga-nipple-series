settings
{
	main
	{
		Description: "it's like rein invasion but with mauga's milkers\nDS2MD\nworkshop.codes/ds2md\n^ see above to contribute translations\n\nyubz made it\nyubz 제작, Lonepier 번역"
		Mode Name: "mauga n!pple pve"
	}
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 12
		Max Team 1 Players: 9
		Max Team 2 Players: 0
		Return To Lobby: Never
		Swap Teams After Match: No
	}
	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Workshop Island Night
				Workshop Island
			}
			Enable Perks: On
			Perk Elimination Catchup Level Amount: 100%
			Perk Generation: 500%
		}
		General
		{
			Game Length In Minutes: 15
			Game Mode Start: Immediately
			Hero Limit: Off
			Imbalanced Team Score To Win: On
			Kill Cam: Off
			Respawn Time Scalar: 35%
			Self Initiated Respawn: Off
			Tank Role Passive Health Bonus: Always Enabled
			Team 1 Score To Win: 100
			Team 2 Score To Win: 1
		}
	}
	heroes
	{
		Team 1
		{
			Ability Cooldown Time: 60%
			Ammunition Clip Size Scalar: 150%
			Jump Vertical Speed: 121%
			Movement Gravity: 110%
			Movement Speed: 140%
			Ultimate Generation: 160%
			Lifeweaver
			{
				Life Grip and Healing Blossom Range: 200%
				Tree of Life Health: 300%
			}
			Widowmaker
			{
				Venom Mine Cooldown Time: 10%
			}
			Venture
			{
				Burrow Cooldown Time: 120%
			}
			Echo
			{
				Flight Cooldown Time: 130%
				Glide: Off
			}
			Freja
			{
				Quick Dash Cooldown Time: 65%
				Updraft Cooldown Time: 120%
			}
			Zarya
			{
			}
			Cassidy
			{
				Damage Dealt: 85%
				Ultimate Generation Deadeye: 70%
			}
			Doomfist
			{
				Ammunition Regeneration Time Scalar: 33%
				Power Block Cooldown Time: 50%
				Seismic Slam Cooldown Time: 50%
				Rocket Punch Cooldown Time: 60%
			}
			Lúcio
			{
				Damage Dealt: 150%
				Ammunition Clip Size Scalar: 300%
			}
			Mercy
			{
				Resurrect Cooldown Time: 250%
			}
			Reinhardt
			{
				Charge Cooldown Time: 40%
			}
		}
		Team 2
		{
			Passive Health Regeneration: Off
			Healing Dealt: 10%
			Lifeweaver
			{
				Spawn With Ultimate Ready: On
			}
			Reinhardt
			{
				Health: 60%
			}
			Torbjörn
			{
				Weapons Enabled: Forge Hammer Only
			}
			Winston
			{
				Ammunition Clip Size Scalar: 30%
				Health: 80%
			}
			Mauga
			{
				Overrun Cooldown Time: 0%
				Passive Health Regeneration: Off
			}
			Venture
			{
				Drill Dash Cooldown Time: 0%
			}
			Wrecking Ball
			{
				Roll Always Active: On
			}
		}
		General
		{
		}
	}
	extensions
	{
		Spawn More Dummy Bots
		Projectiles
		Beam Effects
		Energy Explosion Effects
		Buff Status Effects
		Explosion Sounds
	}
}
variables {
    global:
        0: nipman
        1: bracket
        2: objDescs
        3: threatNames
        4: obj
        5: objWeights
        6: lastObj
        7: objProg
        8: objGoal
        9: objPos
        10: roundNo
        11: threatList
        12: dummyThreats
        13: threatIcons
        14: enemies
        15: mobDmg
        16: i
        17: upto
        18: target1
        19: target2
        20: area1
        21: area2
        22: twisterPos
        23: twisterCache
        24: wallPos
        25: wallI
        26: wallEffects
        27: missilePos
        28: missileFx
        29: missileTemp
        30: rainVar
        31: grabLeft
        32: grabLeftPlayer
        33: grabRight
        34: grabRightPlayer
        35: iMores
        36: moreFx
        37: attackingClone
        38: weakSpots
        39: isun
        40: threatSnipers
        41: threatLactaters
        42: threatSuns
        43: threatNiplets
        44: threatToes
        45: threatDragons
        46: threatDrills
        47: mobs
        48: threatFx
        49: antiCrashOn
        50: hammerProg
        51: hammerSide
        52: hardcoreLevel
        53: nipmanLastHP
        127: __overpyTranslationHelper__
    player:
        0: mobTarget
        1: cacheA
        2: cacheB
        3: cacheC
        4: botA
        5: botB
        6: iniplets
        127: __languageIndex__
}
subroutines {
    0: mobsInit
    1: moreMaugasSetup
}
rule ("Initialize global variables") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(__overpyTranslationHelper__, String Split(Custom String("0White0흰색0白色"), First Of(Null)));
        Set Global Variable(objDescs, Array(String Split(Custom String("ＴＬＥｒｒcollect pages페이지를 모아라收集八页纸"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒdefeat the mini maugas스몰우가들을 처치해라消灭小毛加"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒslay enemies적들을 처치해라消除怪物"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒslay the miniboss미니보스를 처치해라消灭小头目"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒcapture the point거점을 점령해라控制点"), Global.__overpyTranslationHelper__)));
        Set Global Variable(threatNames, Array(String Split(Custom String("ＴＬＥｒｒslenderman슬렌더맨瘦长鬼影"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒmore maugas마우(추)가毛+++"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒfrosty nips냉동찌찌冰冻馒头"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒlactation excavation찌찌드릴lactation excavation"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒdragon stimulation용의 일겨헉♥奶龙"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒtoepples발꼭지奶趾"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒgrabbyteats하우두유두?grabbyteats"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒniplets바운스 모핑贝乳塔"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒcup fight케이찌찌 혈투罩杯中斗"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒtiddy twister공포의 트위스트乳卷风"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒlactic hail유당지옥奶雹"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒn!pple nuke툭튀미사일核馒头"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒdairy deaths우유 알러지dairy deaths"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒmilk wall젖벽대전万里奶城"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒmega milk성장촉진 우유mega milk"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒscalding discharge화끈한 분비물阳盛则热"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒs-nip-ers젖-격수狙挤手"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒboobsted mobs버젖커 몹들小康怪物"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒbooblet hell찌찌피하기弹波波"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒgravitatas젖력... 아니 중력gravitatas"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒsun exposure노출 (햇빛에)阳光明咪"), Global.__overpyTranslationHelper__), String Split(Custom String("ＴＬＥｒｒlazer레이젖咪光束"), Global.__overpyTranslationHelper__)));
        Set Global Variable(objWeights, Array(0.06, 0.12, 0.3, 0.3, 0.22));
        Set Global Variable(threatList, Empty Array);
        Set Global Variable(dummyThreats, Array(0, 15, 16, 20, 7, 4, 5, 3));
        Set Global Variable(threatIcons, Array(Hero Icon String(Hero(Reaper)), Ability Icon String(Hero(Mauga), Button(Ability 1)), Ability Icon String(Hero(Mei), Button(Ultimate)), Ability Icon String(Hero(Venture), Button(Melee)), Ability Icon String(Hero(Hanzo), Button(Ultimate)), Hero Icon String(Hero(Sigma)), Ability Icon String(Hero(Moira), Button(Secondary Fire)), Ability Icon String(Hero(Sigma), Button(Ability 1)), Ability Icon String(Hero(Mauga), Button(Ultimate)), Ability Icon String(Hero(Junker Queen), Button(Ultimate)), Ability Icon String(Hero(Hazard), Button(Ultimate)), Icon String(Radioactive), Ability Icon String(Hero(Reaper), Button(Ultimate)), Ability Icon String(Hero(Mei), Button(Ability 2)), Icon String(Plus), Ability Icon String(Hero(Torbjörn), Button(Ultimate)), Ability Icon String(Hero(Widowmaker), Button(Ultimate)), Ability Icon String(Hero(Ana), Button(Ultimate)), Ability Icon String(Hero(Pharah), Button(Ultimate)), Ability Icon String(Hero(Zarya), Button(Ultimate)), Ability Icon String(Hero(Illari), Button(Ultimate)), Ability Icon String(Hero(Echo), Button(Ability 2))));
        Set Global Variable(enemies, Array(Hero(Winston), Hero(Torbjörn), Hero(Reinhardt), Hero(Mauga)));
        Set Global Variable(mobDmg, Array(75, 130, 75, 80));
        Set Global Variable(weakSpots, Empty Array);
        Set Global Variable(mobs, Empty Array);
        Set Global Variable(hardcoreLevel, Workshop Setting Combo(Custom String("difficulty | 난이도"), Custom String("player respawning 󠁼 플레이어 리스폰 󠁼 玩家重生"), 0, Array(Custom String("always | 항상 | 正常"), Custom String("only when round ends! | 라운드가 끝났을 시에만 | 回合完毕后"), Custom String("never!!! | 리스폰 불가 | 不重生")), 0));
    }
}

rule ("want to contribute a translation? please visit https://github.com/yubber/mauga-nipple-series/, it's easier to make translations for the overpy source file.") {
    event {
        Ongoing - Global;
    }
}

rule ("guide to adding threats") {
    event {
        Ongoing - Global;
    }
    conditions {
        False != False;
    }
    actions {
        "too long to show on workshop. please find the overpy source in github from workshop.codes/DS2MD"
        Respawn(Null);
    }
}

rule ("hey... wanna play some secret gamemodes?") {
    event {
        Ongoing - Global;
    }
    conditions {
        False != False;
    }
    actions {
        "inflation gamemode (pvp or add bots): 9YX9G"
        Respawn(Null);
        "[!] the following games are extremely vulgаr and sехuаl. may be upsetting to viewers. [!]\nkiriko рrоstate exam sim: 032QT"
        Respawn(Null);
        "the below mode also features extreme fеtish content, sеxually aggressive behavior and a mention of pеdophiliа. viewer discretion advised.\noverwatch dating sim: 7GRX3"
        Respawn(Null);
    }
}

rule ("init") {
    event {
        Ongoing - Global;
    }
    actions {
        "set up TX bracket\nScript Created By Zezombye.\nMore Info: https://workshop.codes/wiki/articles/tx-reference-sheet"
        Create Dummy Bot(All Heroes, If-Then-Else(Number Of Slots(Team 1), Team 1, If-Then-Else(Number Of Slots(Team 2), Team 2, True)), False, Null, Null);
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­〼"));
        Set Global Variable(bracket, String Split(First Of(Last Created Entity), Empty Array));
        Start Forcing Dummy Bot Name(Last Created Entity, Custom String("­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­ࡀ"));
        Set Global Variable(bracket, String Slice(String Replace(Custom String("­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­­〼"), Global.bracket, First Of(Last Created Entity)), 63, True));
        Destroy All Dummy Bots;
        Wait(0.016, Ignore Condition);
        "## PROMO"
        Create In-World Text(If-Then-Else(Is Dead(Global.nipman), All Players(All Teams), Null), Value In Array(String Split(Custom String("ＴＬＥｒｒMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nou{0}", Custom String("t 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/maug{0}", Custom String("anip"))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Vector(0, 10.2, 35), 4, Clip Against Surfaces, Visible To Position String and Color, Custom Color(Add(110, Multiply(90, Cosine From Degrees(Multiply(Total Time Elapsed, 150)))), Add(110, Multiply(90, Cosine From Degrees(Add(Multiply(Total Time Elapsed, 150), 120)))), Add(110, Multiply(90, Cosine From Degrees(Add(Multiply(Total Time Elapsed, 150), 240)))), 255), Visible Always);
        Create In-World Text(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nou{0}", Custom String("t 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/maug{0}", Custom String("anip"))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Vector(0, 10, -200), 1.1, Clip Against Surfaces, Visible To Position and String, Custom Color(203, 135, 255, 255), Visible Always);
        Create In-World Text(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nou{0}", Custom String("t 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/maug{0}", Custom String("anip"))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Vector(200, 10, 0), 1.1, Clip Against Surfaces, Visible To Position and String, Custom Color(203, 135, 255, 255), Visible Always);
        Create In-World Text(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nou{0}", Custom String("t 14 sep\ndetails: https://tinyurl.com/mauganipMAUGA N!PPLE PVE: THE DOCVMENTARY\nout 14 sep\ndetails: https://tinyurl.com/maug{0}", Custom String("anip"))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Vector(-200, 10, 0), 1.1, Clip Against Surfaces, Visible To Position and String, Custom Color(203, 135, 255, 255), Visible Always);
        "print(len(getPlayers(Team.2)))\nhudText(hostPlayer, iconString(Icon.EYE), \"eye position\", localPlayer.getEyePosition(), HudPosition.ACTUALLY_LEFT, 0, Color.SKY_BLUE, Color.SKY_BLUE, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)"
        Create HUD Text(All Players(All Teams), Null, Custom String("peak: {0} | average: {1}", Server Load Peak, Server Load Average), Value In Array(String Split(Custom String("ＴＬＥｒｒserver load: {0}\n서버 로드: {0}\n服务器压力：{0}\n", Server Load), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Right, -2, Color(Orange), Color(Gray), Color(Gray), Visible To and String, Visible Always);
        Create HUD Text(All Players(All Teams), Null, Null, Value In Array(String Split(Custom String("ＴＬＥｒｒuse code DS2MD for the latest version워크샵 코드: DS2MD가 항상 최신 버전입니다用DS2MD代码导入最新的版本"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Right, -1, Null, Null, Color(White), Visible To and String, Default Visibility);
        "if DEBUG == false:"
        Disable Inspector Recording;
        Set Global Variable(obj, -1);
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Up, Backward);
        Set Global Variable(nipman, Last Created Entity);
        Start Forcing Player Position(Global.nipman, Vector(0, -19.8, 35), False);
        Start Facing(Global.nipman, Backward, 999, To World, None);
        Disable Movement Collision With Players(Global.nipman);
        "mei iceblock glitch found by https://x.com/mtndewmpdgirl/status/1928190111847485589"
        Disable Movement Collision With Environment(Global.nipman, True);
        "max size"
        Start Scaling Player(Global.nipman, 20, False);
        Set Global Variable(upto, Max Health(Global.nipman));
        Wait(0.08, Ignore Condition);
        Set Max Health(Global.nipman, Absolute Value(10000));
        "this is to fill hp and reset his pose"
        Kill(Global.nipman, Null);
        Set Knockback Received(Global.nipman, 0);
        Disable Built-In Game Mode Completion;
        Disable Built-In Game Mode Music;
        Disable Built-In Game Mode Scoring;
        Heal(Global.nipman, Null, 999999);
        Wait(0.016, Ignore Condition);
        Set Healing Received(Global.nipman, 0);
        Wait(0.016, Ignore Condition);
        Set Player Health(Global.nipman, 72500);
        Set Player Variable(Global.nipman, cacheA, Vector(2.93, 8.04, 26.15));
        Set Player Variable(Global.nipman, cacheB, Vector(-7.19, 8, 30.27));
        "score huds"
        Create HUD Text(All Players(All Teams), Ability Icon String(Hero(Lúcio), Button(Ability 2)), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒtime elapsed지난 시간游戏时间"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Custom String("{0}:{1}", Round To Integer(Divide(Total Time Elapsed, 60), Down), Modulo(Total Time Elapsed, 60)), Left, 1, Color(Sky Blue), Color(White), Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Icon String(Skull), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒteam deaths사망 수team deaths"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Team Score(Team 2), Left, 2, Color(Red), Color(White), Color(White), Visible To and String, Default Visibility);
        Create HUD Text(All Players(All Teams), Icon String(Flag), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒrounds elapsed지난 라운드 수轮数"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Global.roundNo, Left, 2, Color(Yellow), Color(White), Color(White), Visible To and String, Default Visibility);
        Create Effect(If-Then-Else(Compare(Global.obj, !=, -1), All Players(All Teams), Empty Array), Baptiste Immortality Field Protected Effect, Color(Team 2), Global.nipman, 1, Visible To Position and Radius);
        If(False);
        End;
        Create HUD Text(If-Then-Else(Global.antiCrashOn, All Players(All Teams), Null), Icon String(Sad), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒhigh server load detected서버 로드 높음服务器压力高"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Value In Array(String Split(Custom String("ＴＬＥｒｒslowing game speed to prevent crashing크래시 방지를 위해 게임 속도가 늦춰집니다游戏速度已放慢，以免游戏崩溃"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Left, 4, Color(Orange), Color(Orange), Color(White), Visible To and String, Default Visibility);
        Create HUD Text(If-Then-Else(Array Contains(All Players(Team 1), Local Player), Null, All Players(All Teams)), Null, Null, Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒspectators, please turn off team 1 & 2 heroes\nand game mode hud in spectator options\n(press b)관전자는 1팀/2팀 영웅들 설정과\n게임 모드{0}", Custom String(" HUD 설정을 꺼 주십시오\n(B 키)spectators, please turn off team 1 & 2 heroes\nand game mode hud in spectator options\n(press b)")), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Left, 9, Null, Null, Color(Gray), Visible To and String, Visible Always);
        "objective effects"
        Create Effect(If-Then-Else(Compare(Global.obj, ==, 0), All Players(All Teams), Empty Array), Bad Aura, Color(Gray), Up, 50, Visible To Position and Radius);
        For Global Variable(i, 0, 6, 1);
            Create Effect(If-Then-Else(Compare(Global.obj, ==, 0), All Players(All Teams), Empty Array), Cloud, Color(Gray), Subtract(Multiply(Multiply(Up, Global.i), 0.1), 0.7), 50, Visible To);
            Wait(0.016, Ignore Condition);
        End;
        Create Effect(If-Then-Else(Compare(Global.obj, ==, 0), All Players(All Teams), Null), Orb, Color(White), Add(Global.objPos, Multiply(Up, Add(1, Multiply(0.2, Sine From Radians(Multiply(Total Time Elapsed, 5)))))), True, Visible To Position and Radius);
        Create Effect(If-Then-Else(Compare(Global.obj, ==, 4), All Players(All Teams), Empty Array), Ring, Color(Blue), Global.objPos, 12, Visible To Position and Radius);
        Create Icon(If-Then-Else(Compare(Global.obj, ==, 4), All Players(All Teams), Empty Array), Add(Global.objPos, Multiply(Up, Add(1, Multiply(0.3, Sine From Radians(Multiply(Total Time Elapsed, 5)))))), Arrow: Down, Visible To and Position, Color(Team 1), True);
        Wait(0.16, Ignore Condition);
        "objective huds. get max hp is fucking broken for mauga. and tank passive bonus doesn't even let him heal to there"
        Create Progress Bar HUD Text(If-Then-Else(Compare(Global.obj, ==, -1), All Players(All Teams), Empty Array), Divide(Multiply(100, Health(Global.nipman)), 57500), Custom String("{0} {1} / 57500 hp", Hero Icon String(Hero(Mauga)), Round To Integer(Health(Global.nipman), Up)), Top, 1, Color(Team 2), Color(White), Visible To Values and Color, Default Visibility);
        Create Progress Bar HUD Text(If-Then-Else(Compare(Global.obj, !=, -1), All Players(All Teams), Empty Array), Multiply(Divide(Global.objProg, Global.objGoal), 100), Custom String("{0}: {1}! {2}", Value In Array(String Split(Custom String("ＴＬＥｒｒobjective목표目标"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Value In Array(Value In Array(Global.objDescs, Global.obj), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("{0} / {1}", Global.objProg, Global.objGoal)), Top, 1, Color(Team 1), Color(White), Visible To Values and Color, Default Visibility);
        Create HUD Text(If-Then-Else(Compare(Global.obj, !=, -1), All Players(All Teams), Empty Array), Custom String("　{0}: {1} {2}", Value In Array(String Split(Custom String("ＴＬＥｒｒthreats위험 요인危险"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Value In Array(Global.threatIcons, First Of(Global.threatList)), Custom String("{0}{1}{2}", Value In Array(Value In Array(Global.threatNames, First Of(Global.threatList)), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), If-Then-Else(Compare(Count Of(Global.threatList), >, 1), Custom String(", "), Custom String("")), Custom String("{0}{1}{2}", If-Then-Else(Compare(Count Of(Global.threatList), >, 1), Custom String("{0} ", Value In Array(Global.threatIcons, Value In Array(Global.threatList, 1))), Custom String("")), If-Then-Else(Compare(Count Of(Global.threatList), >, 1), Value In Array(Value In Array(Global.threatNames, Value In Array(Global.threatList, 1)), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("")), Custom String("{0}{1}{2}　", If-Then-Else(Compare(Count Of(Global.threatList), >, 2), Custom String(", "), Custom String("")), If-Then-Else(Compare(Count Of(Global.threatList), >, 2), Custom String("{0} ", Value In Array(Global.threatIcons, Value In Array(Global.threatList, 2))), Custom String("")), If-Then-Else(Compare(Count Of(Global.threatList), >, 2), Value In Array(Value In Array(Global.threatNames, Value In Array(Global.threatList, 2)), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("")))))), Null, Custom String(" \n "), Top, 0, Color(Orange), Color(Gray), Color(Gray), Visible To String and Color, Default Visibility);
        Set Player Variable(Global.nipman, cacheA, Vector(2.93, 8.04, 26.15));
        Set Player Variable(Global.nipman, cacheB, Vector(-7.19, 8, 30.27));
        Set Player Variable(Global.nipman, __languageIndex__, Index Of Array Value(Array(Custom String("White"), Custom String("흰색"), Custom String("白色")), Custom String("{0}", Color(White))));
        "hardcore huds"
        If(Compare(Global.hardcoreLevel, ==, 1));
            Create HUD Text(All Players(All Teams), Icon String(Exclamation Mark), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒhardcore mode is on하드코어 모드 활성화硬核模式"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Value In Array(String Split(Custom String("ＴＬＥｒｒno respawning until round ends라운드가 끝날 때까지 리스폰 불가玩家仅在回合完成后重生"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Left, 3, Color(Black), Color(White), Color(White), Visible To and String, Default Visibility);
        Else If(Compare(Global.hardcoreLevel, ==, 2));
            Create HUD Text(All Players(All Teams), Icon String(Exclamation Mark), Custom String("{0}                                                                                                                          {1}", Value In Array(String Split(Custom String("ＴＬＥｒｒultra hardcore mode is on울트라 하드코어 모드 활성화超硬核模式"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Custom String("                                                ")), Value In Array(String Split(Custom String("ＴＬＥｒｒno respawning ever!부활할 수 없습니다!玩家重生"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Left, 3, Color(Black), Color(White), Color(White), Visible To and String, Default Visibility);
        End;
        Set Match Time(5);
    }
}

rule ("loop") {
    event {
        Ongoing - Global;
    }
    conditions {
        "start game when any player spawns for the first time"
        Entity Exists(Global.nipman) == True;
        Is True For Any(All Players(Team 1), Has Spawned(Current Array Element)) == True;
    }
    actions {
        "intermission"
        Destroy Effect(Global.threatFx);
        Destroy Effect(Global.moreFx);
        For Global Variable(i, 0, Count Of(Global.threatFx), 1);
            Destroy In-World Text(Value In Array(Global.threatFx, Global.i));
        End;
        Set Global Variable(threatFx, Empty Array);
        Set Global Variable(threatLactaters, Empty Array);
        Set Global Variable(threatSuns, Empty Array);
        Set Global Variable(threatSnipers, Empty Array);
        Set Global Variable(threatToes, Empty Array);
        Set Global Variable(threatNiplets, Empty Array);
        Set Global Variable(threatDragons, Empty Array);
        Set Global Variable(threatDrills, Empty Array);
        "nipman.threatDecor = []"
        Set Damage Received(Global.nipman, 60);
        "has to be unfroze early bc his hitbox desyncs with model"
        Clear Status(Global.nipman, Frozen);
        Pause Match Time;
        Stop Chasing Global Variable(area1);
        Stop Chasing Global Variable(area2);
        Stop Chasing Global Variable(twisterPos);
        Stop Chasing Global Variable(missilePos);
        Set Player Variable(All Players(Team 1), cacheC, 1);
        Stop Scaling Player(All Players(Team 1));
        Stop All Damage Modifications;
        "getPlayers(Team.1).stopAcceleration()"
        Set Gravity(All Players(Team 1), 100);
        Set Global Variable(lastObj, Global.obj);
        Set Global Variable(obj, -1);
        Set Global Variable(objProg, 0);
        Set Global Variable(threatList, Empty Array);
        Set Match Time(11);
        Unpause Match Time;
        Wait(8, Ignore Condition);
        Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒnext objective in 3 seconds!3초 후에 다음 목표가 적용됩니다!下个目标3秒后出现！"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        Wait(2.5, Ignore Condition);
        Pause Match Time;
        Wait(0.5, Ignore Condition);
        Set Global Variable(mobs, Empty Array);
        "pick objective. using objgoal instead of obj because rules check the obj var"
        Set Global Variable(objPos, Multiply(Down, Max Health(Global.nipman)));
        Set Global Variable(objGoal, Global.lastObj);
        "prevent 2 same obj in a row"
        While(Compare(Global.lastObj, ==, Global.objGoal));
            "sum(weights) must be 1. obj is r here"
            Set Global Variable(objGoal, Random Real(0, 1));
            Set Global Variable(upto, 0);
            "weighted rand from stackoverflow"
            For Global Variable(i, 0, Count Of(Global.objWeights), 1);
                If(Compare(Add(Global.upto, Value In Array(Global.objWeights, Global.i)), >=, Global.objGoal));
                    Set Global Variable(objGoal, Global.i);
                    Break;
                End;
                Modify Global Variable(upto, Add, Value In Array(Global.objWeights, Global.i));
                Wait(0.016, Ignore Condition);
            End;
        End;
        "## pick threats"
        Wait(0.36, Ignore Condition);
        "# guaranteed threats\nguarantee a threat that will get copied by mauga clones"
        If(Compare(Global.objGoal, ==, 1));
            Modify Global Variable(threatList, Append To Array, Random Value In Array(Array(2, 15, 18, 16, 20)));
        End;
        If(False);
        End;
        "# insert objective threats"
        If(Compare(Global.objGoal, ==, 0));
            Modify Global Variable(threatList, Append To Array, 0);
        Else If(Compare(Global.objGoal, ==, 1));
            Modify Global Variable(threatList, Append To Array, 1);
        End;
        "# add threats until 2 non-obj ones are reached\nlastObj is used as temp storage for the candidate threat"
        While(Compare(Count Of(Global.threatList), <, If-Then-Else(Or(Compare(Global.obj, ==, 0), Compare(Global.obj, ==, 1)), 3, 2)));
            Wait(0.016, Ignore Condition);
            Set Global Variable(lastObj, Random Integer(2, 21));
            Skip If(And(Compare(Global.objGoal, ==, 1), Array Contains(Array(17, 12), Global.lastObj)), 6);
            "prevent dupes"
            If(And(Not(Array Contains(Global.threatList, Global.lastObj)), Or(Not(Array Contains(Global.dummyThreats, Global.lastObj)), Compare(Count Of(Filtered Array(Global.threatList, Array Contains(Global.dummyThreats, Current Array Element))), ==, 0))));
                Modify Global Variable(threatList, Append To Array, Global.lastObj);
            End;
            "forbidden combinations"
            If(And(Array Contains(Global.threatList, 3), Array Contains(Global.threatList, 8)));
                Modify Global Variable(threatList, Remove From Array By Index, Subtract(Count Of(Global.threatList), 1));
            End;
            //__label_continue_2__:
        End;
        Wait(0.016, Ignore Condition);
        Modify Global Variable(roundNo, Add, 1);
        Wait(0.016, Ignore Condition);
        If(Compare(Global.hardcoreLevel, <, 2));
            Respawn(All Dead Players(Team 1));
        End;
        Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒround start!라운드 시작!下一轮开始！"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        Set Global Variable(nipmanLastHP, Health(Global.nipman));
        Press Button(Global.nipman, Button(Ability 2));
        Wait(0.48, Ignore Condition);
        Set Global Variable(obj, Global.objGoal);
        Set Global Variable(objGoal, Value In Array(Array(8, 3, 50, 1, 100), Global.obj));
        "i forgot why this can't be 0. surely nothing bad happens :clueless:"
        Set Damage Received(Global.nipman, 0.001);
        "i rember now. it's to detect hook, punch, etc. now also for dragonipples"
        Set Status(Global.nipman, Null, Frozen, 99999);
        "timeout"
        Wait Until(Compare(Global.objProg, >=, Global.objGoal), 600);
        If(Compare(Global.objProg, <, Global.objGoal));
            Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒtimeout exceeded, skipping phase in case of softlock.타임아웃 시간 초과, 버그 방지를 위해 페이즈를 스킵합니다.timeout exceeded, skipping phas{0}", Custom String("e in case of softlock.")), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        End;
        "nipman.setStatusEffect(null, Status.STUNNED, 0.5)"
        Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(Team 1), Vector(0, 0, 18), 100);
        Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Sound, Color(Team 1), Local Player, 200);
        Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒobjective complete! mauga is vulnerable!목표 달성! 마우가가 약해집니다!目标完成！毛加易受打击！"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        Wait(0.016, Ignore Condition);
        If(Compare(Global.hardcoreLevel, <, 2));
            Respawn(All Dead Players(Team 1));
        End;
        Teleport(Filtered Array(All Living Players(Team 1), Compare(Y Component Of(Position Of(Current Array Element)), <, 0)), Up);
        Enable Movement Collision With Environment(All Players(Team 1));
        Loop;
    }
}

rule ("player init & detect ai bot") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == False;
        Has Spawned(Event Player) == True;
    }
    actions {
        Start Forcing Dummy Bot Name(Event Player, Custom String(""));
        If(Compare(Custom String("{0}", Event Player), ==, Custom String("")));
            Set Player Variable(Event Player, cacheB, True);
        Else;
            Set Player Variable(Event Player, cacheB, False);
        End;
        Stop Forcing Dummy Bot Name(Event Player);
        Set Player Variable(Event Player, cacheC, 1);
        Disable Game Mode HUD(Event Player);
        Set Player Allowed Heroes(Event Player, All Heroes);
        "print(eventPlayer.scale)"
        If(Compare(Global.hardcoreLevel, >, 0));
            Disable Built-In Game Mode Respawning(All Players(Team 1));
    }
}

rule ("Subroutine mobsInit") {
    event {
        Subroutine;
        mobsInit;
    }
    actions {
        Set Global Variable(mobs, Empty Array);
        For Global Variable(i, 0, 10, 1);
            "createDummy(enemies[i%len(enemies)], Team.2, -1, Vector.DOWN, Vector.BACKWARD)\ncan't split enemy heroes bc skin limit\ndo not put this above skybox in case enemies aren't killed"
            Create Dummy Bot(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), Team 2, -1, Vector(0, 40, 0), Backward);
            Modify Global Variable(mobs, Append To Array, Last Created Entity);
            Wait(0.124, Ignore Condition);
            "mobs.last().startFacing(directionTowards(mobs[evalOnce(i)].getEyePosition(), mobs[evalOnce(i)].mobTarget), 500, Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)"
            If(Array Contains(Global.threatList, 17));
                Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Value In Array(Global.mobs, Evaluate Once(Global.i)), 1, Visible To Position and Radius);
                Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            End;
        End;
        Wait(0.48, Ignore Condition);
        Set Weapon(Players On Hero(Hero(Torbjörn), Team 2), 2);
        Stop Holding Button(Global.mobs, Button(Primary Fire));
        "if enemies[roundNo%len(enemies)] != Hero.MAUGA:"
        Start Forcing Throttle(Global.mobs, 1, 1, 0, 0, 0, 1);
        Set Damage Dealt(Global.mobs, Value In Array(Global.mobDmg, Modulo(Global.roundNo, Count Of(Global.mobDmg))));
        Set Move Speed(Global.mobs, 70);
        Wait(0.016, Ignore Condition);
        If(Compare(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), ==, Hero(Torbjörn)));
            Set Damage Received(Global.mobs, 85);
        Else If(Compare(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), ==, Hero(Mauga)));
            Set Max Health(Global.mobs, 55);
            Set Move Speed(Global.mobs, 40);
            Set Knockback Dealt(Global.mobs, 40);
            Set Damage Received(Global.mobs, 115);
        Else;
            Set Damage Received(Global.mobs, 100);
        End;
        "kill(mobs, null)\nmobs.resurrect()\nif obj == OBJ.KILL:\nobjProg -= len(mobs)"
        If(Array Contains(Global.threatList, 17));
            Start Damage Modification(All Players(Team 1), Global.mobs, 130, Receivers and Damagers);
        End;
    }
}

rule ("summon the horde") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Global.obj != 0;
        Global.obj != 1;
    }
    actions {
        Wait(0.64, Abort When False);
        Disable Kill Feed(All Players(All Teams));
        Wait(0.016, Ignore Condition);
        "destroyAllInWorldTexts() # debug"
        Call Subroutine(mobsInit);
        Enable Kill Feed(All Players(All Teams));
    }
}

rule ("slendy") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 0;
    }
    actions {
        "destroyAllInWorldTexts() # debug\nbigMessage(hostPlayer, \"slendy spawn debug\")\nfor i in range(MaxBots-4-TreeNo):"
        Create Dummy Bot(Hero(Reaper), Team 2, -1, Vector(0, 7, 99), Backward);
        Modify Global Variable(mobs, Append To Array, Last Created Entity);
        Wait(0.016, Ignore Condition);
        "mobs.last().startFacing(directionTowards(mobs[evalOnce(i)].getEyePosition(), mobs[evalOnce(i)].mobTarget), 500, Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)"
        Start Facing(Last Of(Global.mobs), Direction Towards(Eye Position(Last Of(Global.mobs)), (Last Of(Global.mobs)).mobTarget), 500, To World, Direction and Turn Rate);
        Wait(0.016, Ignore Condition);
        Create Effect(All Players(All Teams), Reaper Wraith Form Effect, Color(Team 2), Last Of(Global.mobs), 1, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        If(Array Contains(Global.threatList, 17));
            Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), Last Of(Global.mobs), 1, Visible To Position and Radius);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        End;
        Wait(0.4, Ignore Condition);
        Start Forcing Throttle(Global.mobs, 1, 1, 0, 0, 0, 1);
        Set Damage Dealt(Global.mobs, If-Then-Else(Array Contains(Global.threatList, 17), 650, 500));
        Set Move Speed(Global.mobs, 99);
        Start Scaling Player(Global.mobs, 2, False);
        Set Max Health(Global.mobs, Absolute Value(1200));
        Disable Kill Feed(All Players(All Teams));
        Kill(Global.mobs, Null);
        Wait(0.016, Ignore Condition);
        Enable Kill Feed(All Players(All Teams));
        "set first page pos for clueless players"
        Set Global Variable(objPos, Forward);
        Start Modifying Hero Voice Lines(Global.mobs, 0.6, False);
        Start Forcing Dummy Bot Name(Global.mobs, Value In Array(Array(Custom String("slenderman"), Custom String("슬렌더맨"), Custom String("瘦长鬼影")), (Global.nipman).__languageIndex__));
        Modify Global Variable(objProg, Subtract, 0.5);
        Wait(0.4, Ignore Condition);
        Heal(Global.mobs, Null, 99999);
        While(Compare(Global.obj, ==, 0));
            Press Button(Global.mobs, Button(Melee));
            Wait(1.2, Ignore Condition);
            If(Compare(Random Real(0, 1), <, 0.03));
                Small Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒremember to check inside mauga's guns for the pages.마우가의 총 안을 확인해 보자.八页纸可能藏在毛加的火枪里。"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            End;
        End;
    }
}

rule ("mob respawn") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Is Alive(Event Player) == True;
        Array Contains(Global.mobs, Event Player) == True;
    }
    actions {
        Teleport(Event Player, If-Then-Else(Compare(Random Integer(0, 1), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB));
        Apply Impulse(Event Player, Vector(Random Real(-0.15, 0.15), Random Real(0.4, 0.66), -1), Random Real(50, 70), To World, Cancel Contrary Motion);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), (Event Player).mobTarget), 500, To World, Direction and Turn Rate);
        Stop Holding Button(Event Player, Button(Primary Fire));
        "torb is hammer only in settings\nif obj != OBJ.PAGES:\ngetPlayersOnHero(Hero.TORBJORN, Team.2).setWeapon(2)\nmobs.startForcingButton(Button.PRIMARY_FIRE)\nwait(0.24)"
        Set Status(Event Player, Null, Knocked Down, 5);
    }
}

rule ("knock mobs") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Y Component Of(Position Of(Event Player)) > 8.5;
        Normalized Health(Event Player) == 1;
        Has Status(Event Player, Knocked Down) == False;
        Array Contains(Global.mobs, Event Player) == True;
    }
    actions {
        Wait(1.5, Ignore Condition);
        Wait Until(Compare(Y Component Of(Position Of(Event Player)), <, 1.8), 7);
        Set Status(Event Player, Null, Knocked Down, 1.6);
        If(And(Compare(Global.obj, !=, 0), Compare(Hero Of(Event Player), !=, Hero(Mauga))));
            Start Holding Button(Event Player, Button(Primary Fire));
        End;
        Communicate(Event Player, Hello);
    }
}

rule ("mob retarget") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.mobs != Empty Array;
        Global.obj != -1;
    }
    actions {
        If(Compare(Count Of(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))), ==, 0));
            "mobs.mobTarget = null"
            If(Compare(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), ==, Hero(Mauga)));
                Cancel Primary Action(Global.mobs);
            End;
            Stop Forcing Throttle(Global.mobs);
            If(Compare(Global.obj, ==, 3));
                Stop Forcing Throttle(Global.objPos);
            End;
        Else;
            For Global Variable(i, 0, Count Of(Global.mobs), 1);
                Wait(0.24, Ignore Condition);
                "1st-3rd closest player"
                If(Is Alive(Value In Array(Global.mobs, Global.i)));
                    Set Player Variable(Value In Array(Global.mobs, Global.i), mobTarget, Value In Array(Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Position Of(Value In Array(Global.mobs, Global.i)))), Modulo(Random Integer(0, 2), Number Of Living Players(Team 1))));
                    Wait(0.08, Ignore Condition);
                    Start Facing(Value In Array(Global.mobs, Global.i), Direction Towards(Eye Position(Evaluate Once(Value In Array(Global.mobs, Global.i))), (Evaluate Once(Value In Array(Global.mobs, Global.i))).mobTarget), 500, To World, Direction and Turn Rate);
                End;
            End;
            Start Forcing Throttle(Global.mobs, 1, 1, 0, 0, 0, 1);
            If(Compare(Global.obj, ==, 3));
                Start Forcing Throttle(Global.objPos, 1, 1, 0, 0, 0, 1);
            End;
            "change boss target"
            If(Compare(Global.obj, ==, 3));
                Set Player Variable(Global.objPos, mobTarget, (First Of(Global.mobs)).mobTarget);
            End;
        End;
        "crash condition found by https://bsky.app/profile/did:plc:reljto3lpvjj5l2tfbl34h4a"
        Wait(1.2, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("mauga mob behavior") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Wait(0.48, Ignore Condition);
        If(Or(Array Contains(Global.mobs, Event Player), And(Compare(Global.obj, ==, 3), Compare(Event Player, ==, Global.objPos))));
            While(True);
                Wait(0.64, Ignore Condition);
                "do not charge if already charging, not played landing stun yet or target invalid"
                If(And(And(And(Not(Is Using Ability 1(Event Player)), Or(Is On Ground(Event Player), Compare(Normalized Health(Event Player), <, 1))), Is Alive((Event Player).mobTarget)), Entity Exists((Event Player).mobTarget)));
                    Press Button(Event Player, Button(Ability 1));
                End;
            End;
    }
}

rule ("drills setup and act") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 3) == True;
    }
    actions {
        Create Dummy Bot(Hero(Venture), Team 2, -1, (Global.nipman).cacheA, Backward);
        Modify Global Variable(threatDrills, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Venture), Team 2, -1, (Global.nipman).cacheB, Backward);
        Modify Global Variable(threatDrills, Append To Array, Last Created Entity);
        Start Scaling Player(Global.threatDrills, 9, False);
        Start Forcing Player Position(First Of(Global.threatDrills), Add(Vector(-2.01, -7.43, 12.43), (Global.nipman).cacheA), False);
        Start Forcing Player Position(Last Of(Global.threatDrills), Add(Vector(-1.449999999999999, -7.38, 11.61), (Global.nipman).cacheB), False);
        Set Status(Global.threatDrills, Null, Phased Out, 99999);
        Start Forcing Dummy Bot Name(Global.threatDrills, Value In Array(Array(Custom String("double drills"), Custom String("찌찌드릴"), Custom String("双钻头")), (Global.nipman).__languageIndex__));
        "place hole"
        Set Player Variable(First Of(Global.threatDrills), cacheA, Add(Multiply(Forward, Random Real(-11, 11)), Multiply(Right, Random Real(-11, 11))));
        If(Array Contains(Global.threatList, 19));
            Teleport(Filtered Array(Players Within Radius((First Of(Global.threatDrills)).cacheA, 9, Team 1, Off), And(Is Alive(Current Array Element), Has Spawned(Current Array Element))), Vector(Multiply(Divide(Divide(Multiply(Multiply(X Component Of((First Of(Global.threatDrills)).cacheA), 999999999999), 999999999999), 999999999999), 10), -15), 1, Multiply(Divide(Divide(Multiply(Multiply(Z Component Of((First Of(Global.threatDrills)).cacheA), 999999999999), 999999999999), 999999999999), 10), -15)));
        End;
        Apply Impulse(Filtered Array(Players Within Radius((First Of(Global.threatDrills)).cacheA, 12, Team 1, Off), And(Is Alive(Current Array Element), Has Spawned(Current Array Element))), Up, 20, To World, Cancel Contrary Motion XYZ);
        Wait(0.016, Ignore Condition);
        Play Effect(All Players(All Teams), Lúcio Sound Barrier Cast Effect, Color(Team 2), (First Of(Global.threatDrills)).cacheA, 1);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(Team 2), (First Of(Global.threatDrills)).cacheA, 90);
        "createProjectile(Projectile.RAMATTRA_RAVENOUS_VORTEX_SPHERE, threatDrills[0], holePos, Vector.DOWN, Relativity.TO_WORLD, ModifyHealth.DAMAGE, Team.1, 1, 1, holeRadius, DynamicEffect.BAD_EXPLOSION, DynamicEffect.BASTION_TANK_CANNON_EXPLOSION_SOUND, 0, getTotalTimeElapsed(), 1, 50, 0,0)"
        Create Effect(All Players(All Teams), Ring, Color(Black), (First Of(Global.threatDrills)).cacheA, 7.5, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        For Player Variable(First Of(Global.threatDrills), cacheB, 0, 20, 1);
            Create Effect(All Players(All Teams), Sphere, Color(Black), Add((First Of(Global.threatDrills)).cacheA, Multiply(Multiply(Down, Square Root(Subtract(2500, Raise To Power(Add(Divide(Multiply(7, Add(Modulo((First Of(Global.threatDrills)).cacheB, 10), 1)), 10), 0.5), 2)))), 0.998959)), 50.052104240514375, Visible To);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            Wait(0.016, Ignore Condition);
        End;
        Wait(0.8, Ignore Condition);
        While(Compare(Global.obj, !=, -1));
            Set Ability Cooldown(Global.threatDrills, Button(Secondary Fire), 0);
            Wait(0.288, Ignore Condition);
            Press Button(Global.threatDrills, Button(Secondary Fire));
        End;
    }
}

rule ("hole action") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 3) == True;
    }
    actions {
        Wait(0.64, Ignore Condition);
        While(Compare(Global.obj, !=, -1));
            If(And(Compare(Y Component Of(Position Of(Event Player)), <, 0.5), Compare(Distance Between(Multiply(Position Of(Event Player), Vector(1, 0, 1)), (First Of(Global.threatDrills)).cacheA), <, 7)));
                Disable Movement Collision With Environment(Event Player, True);
                Set Environment Credit Player(Event Player, First Of(Global.threatDrills));
            Else If(Compare(Y Component Of(Position Of(Event Player)), >, -0.3));
                Enable Movement Collision With Environment(Event Player);
            End;
            Wait(0.16, Ignore Condition);
        End;
    }
}

rule ("dragon init") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 4) == True;
        Or(Compare((Event Player).cacheA, ==, (Global.nipman).cacheA), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Hanzo), Team 2, -1, Up, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, botA, Last Created Entity);
        Start Facing((Event Player).botA, Direction Towards(Eye Position((Event Player).botA), Eye Position(((Event Player).botA).mobTarget)), 6, To World, Direction and Turn Rate);
        Modify Global Variable(threatDragons, Append To Array, (Event Player).botA);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Hanzo), Team 2, -1, Up, Backward);
        Set Player Variable(Event Player, botB, Last Created Entity);
        Start Facing((Event Player).botB, Direction Towards(Eye Position((Event Player).botB), Eye Position(((Event Player).botB).mobTarget)), 6, To World, Direction and Turn Rate);
        Modify Global Variable(threatDragons, Append To Array, (Event Player).botB);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Disable Nameplates(Global.threatDragons, All Players(All Teams));
        Start Forcing Dummy Bot Name(Global.threatDragons, Value In Array(Array(Custom String("dragoniррles"), Custom String("용의 일겨헉♥"), Custom String("奶龙")), (Global.nipman).__languageIndex__));
        Set Status(Global.threatDragons, Null, Phased Out, 9999);
        Set Invisible(Global.threatDragons, Enemies);
        Start Scaling Player(Global.threatDragons, 0.1, False);
        Set Damage Dealt(Global.threatDragons, If-Then-Else(Compare(Global.obj, ==, 1), 55, 120));
        Wait(0.48, Ignore Condition);
        Start Forcing Player Position((Event Player).botB, Add((Event Player).cacheB, Multiply(Facing Direction Of(Event Player), -6)), False);
        Start Forcing Player Position((Event Player).botA, Add((Event Player).cacheA, Multiply(Facing Direction Of(Event Player), -6)), False);
        Set Player Variable((Event Player).botA, cacheA, 0);
        Start Modifying Hero Voice Lines(Global.threatDragons, Add(1, Multiply(0.5, Sine From Radians(Multiply(Total Time Elapsed, 4)))), True);
    }
}

rule ("dragon stimulation") {
    event {
        Player Took Damage;
        Team 2;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Or(Compare(Victim, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
        Victim != Global.attackingClone;
        (Attacker).cacheB != True;
    }
    actions {
        "disable if below check is done\n@Condition THREATS.DRAGON in threatList"
        Wait Until(Compare(Count Of(Global.threatList), >, 0), 5);
        "don't check again"
        If(Not(Array Contains(Global.threatList, 4)));
            Wait Until(Compare(Global.obj, ==, -1), 99999);
            Abort;
        End;
        If(Compare(((Victim).botA).cacheA, >=, If-Then-Else(Compare(Global.obj, ==, 1), 48, 24)));
            Small Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒ{0} heehee, stop tickling me! dragon lactation initation!{0} 헤으응, 그만 간지럽혀♥ 용의 분출 활성화!{0} 嘻嘻嘻，不要弄我啦！奶龙出发！", Hero Icon String(Hero(Mauga))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            Set Player Variable((Victim).botA, mobTarget, Random Value In Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))));
            Wait(0.016, Ignore Condition);
            Set Player Variable((Victim).botB, mobTarget, Random Value In Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))));
            Wait(0.016, Ignore Condition);
            Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(Team 2), (Victim).cacheA, 200);
            Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), (Victim).cacheA, True);
            Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), (Victim).cacheB, True);
            Set Facing((Victim).botA, Direction Towards(Eye Position((Victim).botA), Eye Position(((Victim).botA).mobTarget)), To World);
            Set Facing((Victim).botB, Direction Towards(Eye Position((Victim).botB), Eye Position(((Victim).botB).mobTarget)), To World);
            For Player Variable((Victim).botB, cacheA, 0, 3, 1);
                Set Ultimate Charge(Global.threatDragons, 100);
                Wait(1.12, Ignore Condition);
                Press Button((Victim).botA, Button(Ultimate));
                Press Button((Victim).botB, Button(Ultimate));
                If(Compare(Global.obj, ==, 1));
                    Break;
                End;
            End;
            Set Player Variable((Victim).botA, cacheA, 0);
        Else;
            Modify Player Variable((Victim).botA, cacheA, Add, 1);
            Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Color(Team 2), Add((Event Player).cacheA, Vector(0, 0, -1.1)), True);
            Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Color(Team 2), Add((Event Player).cacheB, Vector(0, 0, -1.1)), True);
            Wait(0.096, Ignore Condition);
    }
}

rule ("TOES") {
    event {
        Ongoing - Global;
    }
    conditions {
        "@Event eachPlayer\n@Hero mauga\n@Team 2\n@Condition eventPlayer == nipman"
        Global.obj != -1;
        Array Contains(Global.threatList, 5) == True;
    }
    actions {
        Wait(1.2, Abort When False);
        Create Dummy Bot(Hero(Sigma), Team 2, -1, Vector(0, 999, 0), Facing Direction Of(Global.nipman));
        Modify Global Variable(threatToes, Append To Array, Last Created Entity);
        Start Scaling Player(Global.threatToes, 12.25, True);
        "threatToes.setStatusEffect(null, Status.PHASED_OUT, 99999)"
        Wait(0.24, Ignore Condition);
        Create Beam Effect(If-Then-Else(And(Compare((Local Player).cacheA, !=, 0), Is Alive(Local Player)), Local Player, Null), Good Beam, (Global.nipman).cacheA, Add(Eye Position(Local Player), Down), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Beam Effect(If-Then-Else(And(Compare((Local Player).cacheA, !=, 0), Is Alive(Local Player)), Local Player, Null), Good Beam, (Global.nipman).cacheB, Add(Eye Position(Local Player), Down), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Set Damage Received(Global.threatToes, 0);
        Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(Team 2), First Of(Global.threatToes), True, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Start Forcing Dummy Bot Name(Global.threatToes, Value In Array(Array(Custom String("toepples"), Custom String("발꼭지"), Custom String("奶趾")), (Global.nipman).__languageIndex__));
        While(Not(Has Status(First Of(Global.threatToes), Knocked Down)));
            Start Forcing Player Position(Global.threatToes, World Vector Of(Vector(2.499, 27.342, -5.439), Global.nipman, Rotation And Translation), True);
            Wait(0.48, Ignore Condition);
            Set Status(Global.threatToes, Null, Knocked Down, 99999);
        End;
    }
}

rule ("toe medusa") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 5) == True;
        Is Dummy Bot(Event Player) == False;
    }
    actions {
        Set Player Variable(Event Player, cacheA, 0);
        Wait(Multiply(0.08, Slot Of(Event Player)), Ignore Condition);
        While(Compare(Global.obj, !=, -1));
            Wait(0.192, Ignore Condition);
            If(Compare(Angle Between Vectors(Facing Direction Of(Event Player), Direction Towards(Eye Position(Event Player), First Of(Global.threatToes))), <, 40));
                Modify Player Variable(Event Player, cacheA, Add, 0.04);
                Set Move Speed(Event Player, Subtract(100, Multiply((Event Player).cacheA, 100)));
                Damage(Event Player, First Of(Global.threatToes), 3);
                If(Compare((Event Player).cacheA, >=, 1));
                    Small Message(Event Player, String Replace(String Replace(String Replace(String Replace(Value In Array(String Split(Custom String("ＴＬＥｒｒ(0.00, 1.00, 0.00) petrified! (0.00, -1.00, 0.00) (1.00, 0.00, 0.00) (-1.00, 0.00, 0.00)(0.00, 1.00, 0.00) 석화됨! 시그마의 발{0}", Custom String("을 쳐다보지 마세요, 이 변태♥(0.00, 1.00, 0.00) 你已被石化！别看住西格玛")), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))), Update Every Frame(Up), Icon String(Eye)), Update Every Frame(Down), String("Avoid")), Update Every Frame(Left), String("Facing")), Update Every Frame(Right), Update Every Frame(Hero(Sigma))));
                    Set Player Variable(Event Player, cacheA, 1);
                    Set Status(Event Player, First Of(Global.threatToes), Frozen, 1.2);
                    Damage(Event Player, First Of(Global.threatToes), 80);
                    Wait(1, Ignore Condition);
                    Set Player Variable(Event Player, cacheA, 0);
                    Set Move Speed(Event Player, 100);
                    Wait(0.48, Ignore Condition);
                End;
            Else;
                Set Player Variable(Event Player, cacheA, 0);
                Set Move Speed(Event Player, 100);
            End;
        End;
        Set Player Variable(Event Player, cacheA, 0);
        Set Move Speed(Event Player, 100);
    }
}

rule ("init weak spots") {
    event {
        Ongoing - Each Player;
        All;
        Wrecking Ball;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        Start Scaling Player(Event Player, 0.8, False);
        Start Forcing Dummy Bot Name(Event Player, Value In Array(Array(Custom String("sensitive spot"), Custom String("약점♥"), Custom String("过敏部位")), (Global.nipman).__languageIndex__));
        Create Icon(All Players(All Teams), Event Player, Warning, Visible To and Color, Custom Color(255, Add(205, Divide(Multiply(50, Sine From Radians(Multiply(Total Time Elapsed, 4))), 2)), 0, 255), True);
        Modify Global Variable(weakSpots, Append To Array, Event Player);
        Wait(0.16, Ignore Condition);
        Create Effect(All Players(All Teams), Echo Cloning Effect, Color(Team 1), Event Player, 1, Visible To);
        Communicate(Event Player, Hello);
    }
}

rule ("more maugas charge attack") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 1;
    }
    actions {
        Wait(2.4, Ignore Condition);
        While(Compare(Global.obj, ==, 1));
            Wait(8, Ignore Condition);
            Set Global Variable(moreFx, Empty Array);
            Abort If(Compare(Global.obj, !=, 1));
            Set Global Variable(attackingClone, Random Value In Array(Global.objPos));
            For Global Variable(iMores, 0, Count Of(Global.weakSpots), 1);
                Destroy Dummy Bot(Team 2, Slot Of(Value In Array(Global.weakSpots, Global.iMores)));
            End;
            Set Global Variable(weakSpots, Empty Array);
            "createBeam(getAllPlayers(), Beam.WINSTON_TESLA_CANNON, attackingClone.smallLNip, LeftNip if attackingClone.smallLNip.x > 0 else RightNip, Color.TEAM_2, EffectReeval.VISIBILITY)"
            Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, (Global.attackingClone).cacheA, (Global.nipman).cacheA, Color(Team 2), Visible To);
            Modify Global Variable(moreFx, Append To Array, Last Created Entity);
            "createBeam(getAllPlayers(), Beam.WINSTON_TESLA_CANNON, attackingClone.smallRNip, LeftNip if attackingClone.smallRNip.x > 0 else RightNip, Color.TEAM_2, EffectReeval.VISIBILITY)"
            Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, (Global.attackingClone).cacheB, (Global.nipman).cacheB, Color(Team 2), Visible To);
            Modify Global Variable(moreFx, Append To Array, Last Created Entity);
            Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒ{0} deadly attack incoming! attack the sensitive spots! {0}{0} 자, 치명적인 공격이 옵니다! 약점♥을 공격하세요! {0}{0} 毛加准备着强大的攻击！快打过敏部位！", Icon String(Warning)), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            Communicate(Random Value In Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Compare((Current Array Element).cacheB, ==, False)))), Press the Attack);
            "all hammond dummies get weak spot init"
            Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Up, Up);
            "left"
            Attach Players(Last Created Entity, Global.attackingClone, Vector(5.399999999999999, 20.1, 5.7));
            Wait(0.016, Ignore Condition);
            Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Up, Up);
            Attach Players(Last Created Entity, Global.attackingClone, Vector(-2.055, 20.1, 7.29));
            Set Player Health(Global.weakSpots, 300);
            Set Healing Received(Global.weakSpots, 0);
            Wait(0.064, Ignore Condition);
            Heal(Global.weakSpots, Null, 99999);
            "wait until with less checking"
            For Global Variable(iMores, 0, 15, 1);
                Wait(0.96, Ignore Condition);
                Abort If(Compare(Global.obj, !=, 1));
                If(Or(Or(Is Dead(Global.attackingClone), Compare(Global.weakSpots, ==, Empty Array)), Not(Entity Exists(Global.attackingClone))));
                    Break;
                End;
                Set Status(Global.attackingClone, Null, Burning, 1);
            End;
            Abort If(Compare(Global.obj, !=, 1));
            If(Or(Or(Is Dead(Global.attackingClone), Not(Entity Exists(Global.attackingClone))), Compare(Global.weakSpots, ==, Empty Array)));
                Clear Status(Global.attackingClone, Frozen);
                Wait(0.112, Ignore Condition);
                Set Status(Global.attackingClone, Null, Stunned, 1);
                Destroy Effect(Global.moreFx);
                Set Global Variable(moreFx, Empty Array);
                Communicate(Random Value In Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))), Yes);
                Big Message(All Players(All Teams), Custom String("success! stopped the attack!"));
                Wait(1.2, Ignore Condition);
                Set Status(Global.attackingClone, Null, Frozen, 99999);
                Set Global Variable(attackingClone, Null);
                Skip(33);
            End;
            Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒ{0} failed to stop the attack. brace for impact!{0} 실패... 충격을 조심하세요!{0} 阻止攻击失败。", Icon String(Sad)), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            For Global Variable(iMores, 0, Count Of(Global.weakSpots), 1);
                Destroy Dummy Bot(Team 2, Slot Of(Value In Array(Global.weakSpots, Global.iMores)));
            End;
            Set Global Variable(weakSpots, Empty Array);
            Communicate(Random Value In Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Compare((Current Array Element).cacheB, ==, False)))), Countdown);
            For Global Variable(iMores, 0, 3, 1);
                Play Effect(All Players(All Teams), Ring Explosion Sound, Color(Team 2), If-Then-Else(Entity Exists(Local Player), Local Player, Eye Position(Global.nipman)), 99);
                Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), (Global.nipman).cacheA, 99);
                Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 2), (Global.nipman).cacheB, 99);
                Wait(1, Ignore Condition);
            End;
            Communicate(Random Value In Array(Filtered Array(All Living Players(Team 1), And(Has Spawned(Current Array Element), Compare((Current Array Element).cacheB, ==, False)))), Incoming);
            Wait(1, Ignore Condition);
            Abort If(Compare(Global.obj, !=, 1));
            Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, (Global.nipman).cacheA, Vector(10, 0, Subtract(20, Multiply(22, Subtract(Total Time Elapsed, Evaluate Once(Total Time Elapsed))))), Color(Team 2), Visible To Position and Radius);
            Modify Global Variable(moreFx, Append To Array, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Moira Coalescence Beam, (Global.nipman).cacheB, Vector(-10, 0, Subtract(20, Multiply(22, Subtract(Total Time Elapsed, Evaluate Once(Total Time Elapsed))))), Color(Team 2), Visible To Position and Radius);
            Modify Global Variable(moreFx, Append To Array, Last Created Entity);
            For Global Variable(iMores, 15, -17, -5);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Vector(10, 0, Global.iMores), 10);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Vector(-10, 0, Global.iMores), 10);
                Create Projectile(Mercy Caduceus Blaster, Global.attackingClone, Vector(-10, 1, Global.iMores), Down, To World, Damage, Team 1, 360, 0.1, 12, DVa Self Destruct Explosion Effect, DVa Self Destruct Explosion Sound, 0, 99, 1, 20, 0, 0);
                Create Projectile(Mercy Caduceus Blaster, Global.attackingClone, Vector(10, 1, Global.iMores), Down, To World, Damage, Team 1, 360, 0.1, 12, DVa Self Destruct Explosion Effect, DVa Self Destruct Explosion Sound, 0, 99, 1, 20, 0, 0);
                Wait(0.336, Ignore Condition);
                If(Compare(Global.obj, ==, -1));
                    Break;
                End;
            End;
            Destroy Effect(Global.moreFx);
            Set Global Variable(moreFx, Empty Array);
            Communicate(Global.nipman, Goodbye);
            //__label_continue_3__:
        End;
    }
}

rule ("niplets + dupe") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 7) == True;
        "or (eventPlayer in objPos and obj == OBJ.MORE)"
        Event Player == Global.nipman;
    }
    actions {
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Down, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, botA, Last Created Entity);
        Modify Global Variable(threatNiplets, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Down, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, botB, Last Created Entity);
        Modify Global Variable(threatNiplets, Append To Array, Last Created Entity);
        Wait(0.224, Ignore Condition);
        "threatNiplets.setStatusEffect(null, Status.FROZEN, 99999)"
        Set Status(Global.threatNiplets, Null, Phased Out, 99999);
        Start Forcing Player Position((Event Player).botA, Add((Event Player).cacheA, Vector(-0.5, -3.5, -1)), False);
        Start Forcing Player Position((Event Player).botB, Add((Event Player).cacheB, Vector(0.5, -3.5, -1)), False);
        Start Scaling Player(Global.threatNiplets, 2, False);
        Wait(0.24, Ignore Condition);
        "eventPlayer.nipletsPosList.append(worldVector(vect(-0.137, 1.378, 0.466)*2, eventPlayer.botB, Transform.ROTATION_AND_TRANSLATION))"
        Wait(0.48, Ignore Condition);
        Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Effect, Color(Team 2), (Event Player).botA, 1, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Effect, Color(Team 2), (Event Player).botB, 1, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Start Forcing Dummy Bot Name(Global.threatNiplets, Value In Array(Array(Custom String("niplets"), Custom String("젖먹이"), Custom String("贝乳塔")), (Global.nipman).__languageIndex__));
        "eventPlayer.iniplets = 0"
        While(Compare(Global.obj, !=, -1));
            Wait(0.24, Ignore Condition);
            "createProjectile(Projectile.BASTION_TACTICAL_GRENADE, eventPlayer.botA, eventPlayer.nipletsPosList[eventPlayer.iniplets], vect(random.uniform(0,0.7),random.uniform(-0.5,1),1), Relativity.TO_PLAYER, ModifyHealth.DAMAGE, Team.1, 80, 1, 1, DynamicEffect.SIGMA_HYPERSPHERE_IMPLOSION, DynamicEffect.SIGMA_HYPERSPHERE_IMPLOSION_SOUND, 0, 20, 3, 0, 35, 30)"
            Create Projectile(Bastion A-36 Tactical Grenade, (Event Player).botA, Up, Vector(Random Real(-0.9, 0.9), Random Real(1, 2), 1), To Player, Damage, Team 1, 80, 1, 1, Sigma Hypersphere Implosion Effect, Sigma Hypersphere Implosion Sound, 0.1, 24, 6, 0, 15, 110);
            Wait(0.24, Ignore Condition);
            Create Projectile(Bastion A-36 Tactical Grenade, (Event Player).botB, Up, Vector(Random Real(-0.9, 0.9), Random Real(1, 2), 1), To Player, Damage, Team 1, 80, 1, 1, Sigma Hypersphere Implosion Effect, Sigma Hypersphere Implosion Sound, 0.1, 24, 6, 0, 15, 110);
            Disable Nameplates(Global.threatNiplets, All Players(All Teams));
        End;
    }
}

rule ("grab") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 6) == True;
    }
    actions {
        Wait(0.192, Ignore Condition);
        "grabplayer changes between player, position, list of players"
        Create Beam Effect(All Players(All Teams), Moira Grasp Connected Beam, (Global.nipman).cacheA, Global.grabLeft, Color(Team 1), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Beam Effect(All Players(All Teams), Moira Grasp Connected Beam, (Global.nipman).cacheB, Global.grabRight, Color(Team 1), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Sigma Hypersphere, Null, Global.grabLeft, Down, 0.05, Visible To Position Direction and Size);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Sigma Hypersphere, Null, Global.grabRight, Down, 0.05, Visible To Position Direction and Size);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Effect(If-Then-Else(Compare(Z Component Of(Global.grabLeftPlayer), !=, Null), All Players(All Teams), Null), Bad Aura, Color(Team 2), Global.grabLeftPlayer, 2, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Effect(If-Then-Else(Compare(Z Component Of(Global.grabRightPlayer), !=, Null), All Players(All Teams), Null), Bad Aura, Color(Team 2), Global.grabRightPlayer, 2, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        While(Compare(Global.obj, !=, -1));
            Set Global Variable(grabLeft, (Global.nipman).cacheA);
            Set Global Variable(grabRight, (Global.nipman).cacheB);
            "select"
            Set Global Variable(grabLeftPlayer, Random Value In Array(Filtered Array(All Living Players(Team 1), Compare(X Component Of(Position Of(Current Array Element)), >, 0))));
            Set Global Variable(grabRightPlayer, Random Value In Array(Filtered Array(All Living Players(Team 1), Compare(X Component Of(Position Of(Current Array Element)), <, 0))));
            "attack"
            If(Entity Exists(Global.grabLeftPlayer));
                Set Global Variable(grabLeftPlayer, Add(Add(Position Of(Global.grabLeftPlayer), Vector(0, 0.5, 0)), Multiply(Multiply(Velocity Of(Global.grabLeftPlayer), Vector(1, 0, 1)), 2.4)));
                Chase Global Variable Over Time(grabLeft, Global.grabLeftPlayer, 2.4, None);
            End;
            If(And(Entity Exists(Global.grabRightPlayer), Compare(Global.grabLeftPlayer, !=, Global.grabRightPlayer)));
                Set Global Variable(grabRightPlayer, Add(Add(Position Of(Global.grabRightPlayer), Vector(0, 0.5, 0)), Multiply(Multiply(Velocity Of(Global.grabRightPlayer), Vector(1, 0, 1)), 2.4)));
                Chase Global Variable Over Time(grabRight, Global.grabRightPlayer, 2.4, None);
            End;
            Wait(2.4, Ignore Condition);
            Stop Chasing Global Variable(grabLeft);
            Stop Chasing Global Variable(grabRight);
            Abort If(Compare(Global.obj, ==, -1));
            "check landing"
            Set Global Variable(grabLeftPlayer, Filtered Array(Players Within Radius(Global.grabLeft, 2, Team 1, Off), And(Is Alive(Current Array Element), Has Spawned(Current Array Element))));
            Start Forcing Player Position(Global.grabLeftPlayer, Global.grabLeft, True);
            Small Message(Global.grabLeftPlayer, Value In Array(String Split(Custom String("ＴＬＥｒｒ{0} you were grabbed!{0} 잡혔습니다!{0} 你被抓到了！", Ability Icon String(Hero(Moira), Button(Secondary Fire))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Color(Team 2), Global.grabLeft, 20);
            Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Color(Team 2), Global.grabLeft, 20);
            Set Global Variable(grabRightPlayer, Filtered Array(Players Within Radius(Global.grabRight, 2, Team 1, Off), And(Is Alive(Current Array Element), Has Spawned(Current Array Element))));
            Start Forcing Player Position(Global.grabRightPlayer, Global.grabRight, True);
            Small Message(Global.grabRightPlayer, Value In Array(String Split(Custom String("ＴＬＥｒｒ{0} you were grabbed!{0} 잡혔습니다!{0} 你被抓到了！", Ability Icon String(Hero(Moira), Button(Secondary Fire))), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Color(Team 2), Global.grabRight, 20);
            Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Color(Team 2), Global.grabRight, 20);
            "pull"
            Chase Global Variable Over Time(grabLeft, (Global.nipman).cacheA, 1.2, None);
            Chase Global Variable Over Time(grabRight, (Global.nipman).cacheB, 1.2, None);
            Start Damage Over Time(Global.grabLeftPlayer, Null, 1.2, 10);
            Start Damage Over Time(Global.grabRightPlayer, Null, 1.2, 10);
            Wait(1.2, Ignore Condition);
            Stop Chasing Global Variable(grabLeft);
            Stop Chasing Global Variable(grabRight);
            Wait(0.08, Ignore Condition);
            Stop Forcing Player Position(Global.grabLeftPlayer);
            Stop Forcing Player Position(Global.grabRightPlayer);
        End;
    }
}

rule ("cage") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Global.obj != -1;
        Is Dummy Bot(Event Player) == False;
        Has Spawned(Event Player) == True;
        Array Contains(Global.threatList, 8) == True;
    }
    actions {
        "threatFx.append(getLastCreatedEntity())\nwait()"
        Wait(0.256, Abort When False);
        Create Beam Effect(All Players(All Teams), Junkrat Trap Chain Beam, Evaluate Once(If-Then-Else(Compare(Modulo(Slot Of(Event Player), 2), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB)), Event Player, Color(Team 1), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Wait(Multiply(Slot Of(Event Player), 0.016), Ignore Condition);
        While(Compare(Global.obj, !=, -1));
            If(And(Compare(Z Component Of(Position Of(Event Player)), <, -4), Not(Is Crouching(Event Player))));
                Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), If-Then-Else(Compare(Modulo(Slot Of(Event Player), 2), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB)), 15, To World, Cancel Contrary Motion);
            End;
            Wait(0.36, Ignore Condition);
        End;
    }
}

rule ("cage boundary") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 8) == True;
    }
    actions {
        "threatFx.append(getLastCreatedEntity())\nwait()"
        Create Beam Effect(All Players(All Teams), Bad Beam, Vector(-20, 0.1, -4), Vector(20, 0.1, -4), Color(Rose), Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
    }
}

rule ("milk wall + collision") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 13) == True;
    }
    actions {
        Wait(0.416000000000000, Ignore Condition);
        Set Global Variable(wallEffects, Empty Array);
        While(Compare(Global.obj, !=, -1));
            Set Global Variable(wallPos, Vector(Random Real(-20, 6.799999999999999), 0, 20));
            For Global Variable(wallI, 0, 54, 1);
                Skip If(Compare(Global.obj, ==, -1), 19);
                Create Projectile(Echo Sticky Bomb, Global.nipman, If-Then-Else(Compare(Modulo(Global.wallI, 2), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB), Direction Towards(If-Then-Else(Compare(Modulo(Global.wallI, 2), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB), Add(Global.wallPos, Multiply(Vector(Modulo(Global.wallI, 6), Round To Integer(Divide(Global.wallI, 6), Down), 0), 2.2))), To World, Damage, Team 1, 0, 0, 0.1, Brigitte Repair Pack Armor Effect, Brigitte Repair Pack Armor Sound, 0.1, 50, Divide(Magnitude Of(Add(Subtract(If-Then-Else(Compare(Modulo(Global.wallI, 2), ==, 0), (Global.nipman).cacheA, (Global.nipman).cacheB), Global.wallPos), Multiply(Vector(Modulo(Global.wallI, 6), Round To Integer(Divide(Global.wallI, 6), Down), 0), 2.2))), 120), 0, 0, 0);
                Wait(0.144, Ignore Condition);
                Create Projectile Effect(All Players(All Teams), Echo Sticky Bomb, Null, Add(Global.wallPos, Evaluate Once(Multiply(Vector(Modulo(Global.wallI, 6), Round To Integer(Divide(Global.wallI, 6), Down), 0), 2.2))), Backward, 0.1, Visible To Position Direction and Size);
                Modify Global Variable(wallEffects, Append To Array, Last Created Entity);
            End;
            For Global Variable(wallI, 0, 3, 1);
                Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Color(Team 2), Global.wallPos, 800);
                Wait(Multiply(Subtract(3, Global.wallI), 0.16), Ignore Condition);
            End;
            Chase Global Variable Over Time(wallPos, Add(Global.wallPos, Vector(0, 0, -90)), 3.5, None);
            "collision"
            For Global Variable(wallI, 0, 25, 1);
                If(Compare(Global.obj, ==, -1));
                    Break;
                End;
                Wait(0.096, Ignore Condition);
                Set Player Variable(Global.nipman, mobTarget, Filtered Array(All Living Players(Team 1), And(And(And(Compare(Absolute Value(Subtract(Z Component Of(Position Of(Current Array Element)), Z Component Of(Global.wallPos))), <, 1.3), Compare(X Component Of(Position Of(Current Array Element)), >, X Component Of(Global.wallPos))), Compare(X Component Of(Position Of(Current Array Element)), <, Add(X Component Of(Global.wallPos), 13.200000000000001))), Compare(Y Component Of(Position Of(Current Array Element)), <=, 19.8))));
                "nipman.mobTarget.applyImpulse(Vector.BACKWARD + Vector.UP * 0.1, 100, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)"
                Set Status((Global.nipman).mobTarget, Null, Knocked Down, 1.5);
                "multihits except when it doesn't"
                Damage((Global.nipman).mobTarget, Null, 90);
            End;
            //lbl_wallskip:
            For Global Variable(wallI, 0, Count Of(Global.wallEffects), 1);
                Destroy Effect(Value In Array(Global.wallEffects, Global.wallI));
                Wait(0.016, Ignore Condition);
            End;
            Destroy Effect(Global.wallEffects);
            Set Global Variable(wallEffects, Empty Array);
            Stop Chasing Global Variable(wallPos);
        End;
    }
}

rule ("rain") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 10) == True;
    }
    actions {
        Wait(0.32, Ignore Condition);
        Create Effect(All Players(All Teams), Cloud, Color(Gray), Vector(0, 30, 0), 40, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        For Global Variable(rainVar, 0, 5, 1);
            Create Effect(All Players(All Teams), Light Shaft, Custom Color(255, 112, 122, 255), Add(Vector(Multiply(Multiply(Sine From Radians(Divide(Total Time Elapsed, 3)), 20), Evaluate Once(Subtract(Multiply(Modulo(Global.rainVar, 2), 2), 1))), 0, Evaluate Once(Subtract(16, Multiply(8, Global.rainVar)))), Vector(0, -21, 0)), 4, Visible To Position and Radius);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            Create Effect(All Players(All Teams), Ring, Color(Team 2), Vector(Multiply(Multiply(Sine From Radians(Divide(Total Time Elapsed, 3)), 20), Evaluate Once(Subtract(Multiply(Modulo(Global.rainVar, 2), 2), 1))), 0, Evaluate Once(Subtract(16, Multiply(8, Global.rainVar)))), 4, Visible To Position and Radius);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        End;
        While(Compare(Global.obj, !=, -1));
            For Global Variable(rainVar, 0, 5, 1);
                "reduce the cloud seeding fx"
                If(Compare(Modulo(Global.rainVar, 2), !=, 0));
                    Create Projectile(Echo Sticky Bomb, Null, If-Then-Else(Compare(Global.rainVar, ==, 1), (Global.nipman).cacheA, (Global.nipman).cacheB), Direction Towards(Eye Position(Global.nipman), Vector(Random Real(-10, 10), 30, Random Real(-15, 19))), To World, Damage, Team 1, 1, 1, 0, Brigitte Whip Shot Heal Area Effect, Brigitte Whip Shot Heal Area Sound, 0.05, 30, 1, 0, 0, -5);
                End;
                Wait(0.032, Ignore Condition);
                Create Projectile(Mei Icicle, Null, Add(Add(Vector(Multiply(Multiply(Sine From Radians(Divide(Total Time Elapsed, 3)), 20), Evaluate Once(Subtract(Multiply(Modulo(Global.rainVar, 2), 2), 1))), 0, Evaluate Once(Subtract(16, Multiply(8, Global.rainVar)))), Vector(0, 30, 0)), Vector(Random Real(-0.5, 0.5), 0, Random Real(-0.5, 0.5))), Down, To World, Damage, Team 1, 25, 1, 3.2, Brigitte Repair Pack Impact Effect, Brigitte Whip Shot Heal Area Sound, 0.07, 200, 1, 2, 0, 0);
                Wait(0.024, Ignore Condition);
            End;
        End;
    }
}

rule ("twister") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 9) == True;
    }
    actions {
        Wait(0.288000000000000, Ignore Condition);
        For Global Variable(twisterCache, 3, 12, 2);
            "smallMessage(getAllPlayers(), i)"
            Create Effect(All Players(All Teams), Bad Aura, Color(Gray), Add(Multiply(Up, Evaluate Once(Subtract(Multiply(Global.twisterCache, 2.5), 6))), Global.twisterPos), Evaluate Once(Multiply(Global.twisterCache, 0.7)), Visible To Position and Radius);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            Create Projectile Effect(All Players(All Teams), Echo Sticky Bomb, Null, Add(Global.twisterPos, Multiply(Multiply(Evaluate Once(Global.twisterCache), 0.8), Vector(Cosine From Radians(Add(Multiply(Total Time Elapsed, 7), Evaluate Once(Global.twisterCache))), Add(1, Multiply(0.4, Sine From Radians(Total Time Elapsed))), Sine From Radians(Add(Multiply(Total Time Elapsed, 7), Evaluate Once(Global.twisterCache)))))), Up, Evaluate Once(Random Real(0, 0.05)), Visible To Position Direction and Size);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            Create Projectile Effect(All Players(All Teams), Zarya Particle Cannon, Null, Add(Global.twisterPos, Multiply(Multiply(Evaluate Once(Global.twisterCache), 0.8), Vector(Cosine From Radians(Add(Multiply(Total Time Elapsed, 9), Evaluate Once(Global.twisterCache))), Add(1.3, Multiply(0.4, Cosine From Radians(Total Time Elapsed))), Sine From Radians(Add(Multiply(Total Time Elapsed, 9), Evaluate Once(Global.twisterCache)))))), Up, Evaluate Once(Random Real(0, 0.05)), Visible To Position Direction and Size);
            Modify Global Variable(threatFx, Append To Array, Last Created Entity);
            Wait(0.016, Ignore Condition);
        End;
        Create Effect(All Players(All Teams), Ring, Color(Team 2), Global.twisterPos, 6, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Effect(All Players(All Teams), Cloud, Color(Gray), Add(Global.twisterPos, Vector(0, 24, 0)), 30, Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Zarya Particle Cannon, Null, Add(Global.twisterPos, Vector(0, -7, 0)), Down, 1, Visible To Position Direction and Size);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Set Global Variable(twisterPos, Multiply((Global.nipman).cacheA, Vector(1, 0, 1)));
        Chase Global Variable At Rate(twisterPos, Multiply(Position Of(First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.twisterPos)))), Vector(1, 0, 1)), 1.6, Destination and Rate);
        While(Compare(Global.obj, !=, -1));
            Set Global Variable(twisterCache, Filtered Array(All Living Players(Team 1), And(Compare(Distance Between(Multiply(Position Of(Current Array Element), Vector(1, 0, 1)), Global.twisterPos), <, 6), Compare(Y Component Of(Position Of(Current Array Element)), <, 25))));
            Apply Impulse(Global.twisterCache, Up, 7, To World, Incorporate Contrary Motion);
            Damage(Global.twisterCache, Null, 35);
            Wait(0.24, Ignore Condition);
        End;
    }
}

rule ("sun loop") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 20) == True;
    }
    actions {
        While(Compare(Global.obj, !=, -1));
            Wait(0.64, Ignore Condition);
            Set Invisible(Global.threatSuns, Enemies);
            Set Status(Global.threatSuns, Null, Phased Out, 99999);
            Start Forcing Dummy Bot Name(Global.threatSuns, Value In Array(Array(Custom String("sunkissed nips"), Custom String("아침에젖스"), Custom String("太阳公主")), (Global.nipman).__languageIndex__));
            Set Projectile Speed(Global.threatSuns, 30);
            Disable Nameplates(Global.threatSuns, All Players(All Teams));
            Set Damage Dealt(Global.threatSuns, Max(45, Divide(180, Count Of(Global.threatSuns))));
            Start Modifying Hero Voice Lines(Global.threatSuns, 0, False);
            Set Ultimate Charge(Global.threatSuns, 100);
            Wait(If-Then-Else(Compare(Global.obj, ==, 1), 8, 4), Ignore Condition);
            Press Button(Global.threatSuns, Button(Ultimate));
            For Global Variable(isun, 0, Count Of(Global.threatSuns), 1);
                If(Not(Entity Exists(Value In Array(Global.threatSuns, Global.isun))));
                    Modify Global Variable(threatSuns, Remove From Array By Index, Global.isun);
                Else;
                    Set Facing(Value In Array(Global.threatSuns, Global.isun), Direction Towards(Eye Position(Value In Array(Global.threatSuns, Global.isun)), Position Of(Random Value In Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))))), To World);
                End;
                Wait(0.064, Ignore Condition);
            End;
            "threatSuns.slice(0,len(threatSuns)/2).setFacing(, Relativity.TO_PLAYER)\nthreatSuns.slice(len(threatSuns/2),len(threatSuns)).setFacing(directionTowards(RightNip + Vector.UP * 5, random.choice(getLivingPlayers(Team.1)).getEyePosition()), Relativity.TO_WORLD)"
            Wait(2, Ignore Condition);
            Press Button(Global.threatSuns, Button(Primary Fire));
        End;
    }
}

rule ("gravitatas") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 19) == True;
    }
    actions {
        Create Projectile Effect(All Players(All Teams), Zarya Graviton, Null, (Global.nipman).cacheA, Backward, 0.27, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Zarya Graviton, Null, (Global.nipman).cacheB, Backward, 0.27, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        "there was an issue with players getting stuck on the bottom rocks opposite mauga\ngetPlayers(Team.1).startAcceleration(Vector.FORWARD + 0.15 * Vector.DOWN, 80, 15, Relativity.TO_WORLD, AccelReeval.NONE)"
        While(Compare(Global.obj, !=, -1));
            Set Gravity(All Players(Team 1), 300);
            Wait(6, Ignore Condition);
        End;
    }
}

rule ("boolet") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 18) == True;
    }
    actions {
        Wait(0.576000000000000, Ignore Condition);
        While(Compare(Global.obj, !=, -1));
            Create Projectile(Orisa Fusion Driver, Null, (Global.nipman).cacheA, Vector(Multiply(Sine From Radians(Multiply(Total Time Elapsed, 2)), 0.5), Subtract(Multiply(Cosine From Radians(Total Time Elapsed), 0.1), 0.2), -1), To World, Damage, Team 1, 130, 1, 0, DVa Micro Missiles Explosion Effect, DVa Micro Missiles Explosion Sound, 0.04, 14, 4, 0, 0, 0);
            Wait(0.08, Ignore Condition);
            Create Projectile(Mercy Caduceus Blaster, Null, (Global.nipman).cacheB, Vector(Multiply(Sine From Radians(Multiply(Total Time Elapsed, 2)), -0.5), Subtract(Multiply(Cosine From Radians(Total Time Elapsed), -0.1), 0.2), -1), To World, Damage, Team 1, 130, 1, 0, DVa Micro Missiles Explosion Effect, DVa Micro Missiles Explosion Sound, 0.1, 14, 4, 0, 0, 0);
            Wait(0.08, Ignore Condition);
        End;
    }
}

rule ("laser") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 21) == True;
    }
    actions {
        Wait(0.672, Ignore Condition);
        Set Global Variable(area1, Vector(10, 0, 20));
        Set Global Variable(area2, Vector(-10, 0, 20));
        Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, (Global.nipman).cacheA, Global.area1, Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, (Global.nipman).cacheB, Global.area2, Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Zarya Particle Cannon, Null, Add(Global.area1, Vector(0, -4, 0)), Down, 0.55, Visible To Position Direction and Size);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Zarya Particle Cannon, Null, Add(Global.area2, Vector(0, -4, 0)), Down, 0.55, Visible To Position Direction and Size);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Chase Global Variable At Rate(area1, Multiply(Position Of(First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.area1)))), Vector(1, 0, 1)), 1.1, Destination and Rate);
        Chase Global Variable At Rate(area2, Multiply(Position Of(First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.area2)))), Vector(1, 0, 1)), 1.1, Destination and Rate);
        While(Compare(Global.obj, !=, -1));
            Create Projectile(Ramattra Ravenous Vortex Sphere, Null, Add(Global.area1, Vector(0, 0.5, 0)), Down, To World, Damage, Team 1, 20, 1, 3, Zarya Particle Cannon Explosion Effect, Symmetra Teleporter Reappear Sound, 0, Total Time Elapsed, 10, 55, 0, 0);
            Wait(0.08, Ignore Condition);
            Create Projectile(Ramattra Ravenous Vortex Sphere, Null, Add(Global.area2, Vector(0, 0.5, 0)), Down, To World, Damage, Team 1, 20, 1, 3, Zarya Particle Cannon Explosion Effect, Symmetra Teleporter Reappear Sound, 0, Total Time Elapsed, 3, 55, 0, 0);
            Wait(0.8, Ignore Condition);
        End;
    }
}

rule ("discharge") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Or(Compare(Event Player, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
        Global.obj != -1;
        Array Contains(Global.threatList, 15) == True;
    }
    actions {
        Wait(0.48, Ignore Condition);
        Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Up, Backward);
        Set Player Variable(Event Player, botA, Last Created Entity);
        Modify Global Variable(threatLactaters, Append To Array, Last Created Entity);
        Start Forcing Player Position(Last Created Entity, (Event Player).cacheA, False);
        Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Up, Backward);
        Set Player Variable(Event Player, botB, Last Created Entity);
        Modify Global Variable(threatLactaters, Append To Array, Last Created Entity);
        Start Forcing Player Position(Last Created Entity, (Event Player).cacheB, False);
        Wait(0.36, Ignore Condition);
        Set Weapon(Global.threatLactaters, 2);
        Start Scaling Player(Global.threatLactaters, 0.3, False);
        Set Status(Global.threatLactaters, Null, Phased Out, 9999);
        Set Invisible(Global.threatLactaters, All);
        Start Holding Button(Global.threatLactaters, Button(Primary Fire));
        Start Facing((Event Player).botA, Add(Add(Multiply(Multiply(Evaluate Once(Direction Towards(Multiply((Event Player).cacheA, Vector(1, 0, 1)), Vector(20, 0, 0))), Sine From Radians(Multiply(Total Time Elapsed, 33))), 0.7), Multiply(0.4, Multiply(Up, Add(Sine From Radians(Multiply(Total Time Elapsed, 47)), 0.25)))), Facing Direction Of(Event Player)), 9999, To World, Direction and Turn Rate);
        Start Facing((Event Player).botB, Add(Add(Multiply(Multiply(Evaluate Once(Direction Towards(Multiply((Event Player).cacheB, Vector(1, 0, 1)), Vector(20, 0, 0))), Sine From Radians(Multiply(Total Time Elapsed, 33))), 0.7), Multiply(0.4, Multiply(Up, Add(Sine From Radians(Multiply(Total Time Elapsed, 47)), 0.25)))), Facing Direction Of(Event Player)), 9999, To World, Direction and Turn Rate);
        "eventPlayer.botB.startFacing(worldVector(vect(sin(getTotalTimeElapsed() * 33)*0.45, sin(getTotalTimeElapsed() * 47)*0.32 - 0.09, -1), eventPlayer, Transform.ROTATION) + eventPlayer.getFacingDirection() * 3, 50, Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)"
        Wait(0.36, Ignore Condition);
        Start Modifying Hero Voice Lines(Global.threatLactaters, Add(1, Multiply(0.5, Sine From Radians(Multiply(Total Time Elapsed, 2)))), True);
        Start Forcing Dummy Bot Name(Global.threatLactaters, Value In Array(Array(Custom String("overheating glands"), Custom String("과열된 돌출부"), Custom String("乳腺上火")), (Global.nipman).__languageIndex__));
        Disable Nameplates(Global.threatLactaters, All Players(All Teams));
        "main mauga torbs are higher"
        Set Projectile Gravity((Global.nipman).botA, 140);
        Set Projectile Gravity((Global.nipman).botB, 140);
    }
}

rule ("everybody discharge") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 15) == True;
    }
    actions {
        While(Array Contains(Global.threatList, 15));
            Wait(3, Ignore Condition);
            Set Ultimate Charge(Global.threatLactaters, 100);
            Set Damage Dealt(Global.threatLactaters, Divide(80, Count Of(Global.threatLactaters)));
            Disable Nameplates(Global.threatLactaters, All Players(All Teams));
            Wait(0.12, Ignore Condition);
            Press Button(Global.threatLactaters, Button(Ultimate));
            Wait(7, Ignore Condition);
        End;
    }
}

rule ("heal milk") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 14) == True;
        Array Contains(Global.mobs, Event Player) == False;
        Or(Compare(Event Player, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
    }
    actions {
        Wait(0.48, Ignore Condition);
        Create Projectile Effect(All Players(All Teams), Moira Heal Orb, Null, (Event Player).cacheA, Facing Direction Of(Event Player), 0, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Moira Heal Orb, Null, (Event Player).cacheB, Facing Direction Of(Event Player), 0, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        While(And(Compare(Global.obj, !=, -1), Is Alive(Event Player)));
            Wait(1.2, Ignore Condition);
            Create Homing Projectile(Echo Sticky Bomb, Event Player, (Event Player).cacheA, Facing Direction Of(Event Player), To World, Heal, Team 1, 40, 20, 1, Brigitte Whip Shot Heal Area Effect, Baptiste Biotic Launcher Explosion Sound, 0.05, 50, 1, 0, Random Value In Array(Filtered Array(All Living Players(Team 1), Compare(Normalized Health(Current Array Element), <, 1))), 1);
            Create Homing Projectile(Echo Sticky Bomb, Event Player, (Event Player).cacheB, Facing Direction Of(Event Player), To World, Heal, Team 1, 40, 20, 1, Brigitte Whip Shot Heal Area Effect, Baptiste Biotic Launcher Explosion Sound, 0.05, 50, 1, 0, Random Value In Array(Filtered Array(All Living Players(Team 1), Compare(Normalized Health(Current Array Element), <, 1))), 1);
        End;
    }
}

rule ("chungus") {
    event {
        Player Received Healing;
        Team 1;
        All;
    }
    conditions {
        Healer == Global.nipman;
    }
    actions {
        Modify Player Variable(Event Player, cacheC, Add, Multiply(Event Healing, 0.0095));
        Start Scaling Player(Event Player, (Event Player).cacheC, False);
    }
}

rule ("nuke") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 11) == True;
    }
    actions {
        Wait(0.352, Ignore Condition);
        "debug\ncreateEffect(getAllPlayers(), Effect.LIGHT_SHAFT, Color.ROSE, missilePos, 1, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)"
        While(Compare(Global.obj, !=, -1));
            Set Global Variable(missileFx, Empty Array);
            Set Global Variable(missilePos, Vector(0, 1, 20));
            Chase Global Variable At Rate(missilePos, Add(Multiply(Position Of(First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element)), Distance Between(Current Array Element, Global.missilePos)))), Vector(1, 0, 1)), Up), 5, Destination and Rate);
            "chaser"
            Create Projectile Effect(All Players(All Teams), Zarya Graviton, Null, Global.missilePos, Up, 0.1, Visible To Position Direction and Size);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Wait(0.016, Ignore Condition);
            "closest player check, can't use wait until in case rule must break"
            While(Compare(Global.missileFx, !=, Empty Array));
                If(Compare(Global.obj, ==, -1));
                    For Global Variable(missileTemp, 0, Count Of(Global.missileFx), 1);
                        Destroy Effect(Value In Array(Global.missileFx, Global.missileTemp));
                    End;
                    Abort;
                End;
                "probably a bit more optimal since this stops checking on the first player found, instead of checking all players in radius"
                For Global Variable(missileTemp, 0, Number Of Living Players(Team 1), 1);
                    If(And(Has Spawned(Value In Array(All Living Players(Team 1), Global.missileTemp)), Compare(Distance Between(Position Of(Value In Array(All Living Players(Team 1), Global.missileTemp)), Global.missilePos), <, 3)));
                        Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Color(Team 2), Global.missilePos, 100);
                        Destroy Effect(First Of(Global.missileFx));
                        Set Global Variable(missileFx, Empty Array);
                        Break;
                    End;
                End;
                Wait(0.24, Ignore Condition);
            End;
            //lbl_0:
            Stop Chasing Global Variable(missilePos);
            Modify Global Variable(missilePos, Subtract, Up);
            Create Projectile Effect(All Players(All Teams), Zarya Graviton, Null, Add(Global.missilePos, Up), Up, Add(0.1, Multiply(0.1, Subtract(Total Time Elapsed, Global.missileTemp))), Visible To Position Direction and Size);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Wait(0.016, Ignore Condition);
            Set Global Variable(missileTemp, Total Time Elapsed);
            Wait(3, Ignore Condition);
            "deto"
            If(Compare(Global.obj, ==, -1));
                For Global Variable(missileTemp, 0, Count Of(Global.missileFx), 1);
                    Destroy Effect(Value In Array(Global.missileFx, Global.missileTemp));
                End;
                Abort;
            End;
            Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Effect, Color(Team 2), (Global.nipman).cacheA, 1);
            Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Effect, Color(Team 2), (Global.nipman).cacheB, 1);
            Create Projectile(Pharah Rocket, Null, (Global.nipman).cacheA, Direction Towards((Global.nipman).cacheA, Add(Global.missilePos, Vector(0, 2, 0))), To World, Damage, Team 1, 1, 1, 10, Sombra EMP Explosion Effect, DVa Self Destruct Explosion Sound, 1, 100, 0.5, 20, 0, 0);
            Create Projectile(Pharah Rocket, Null, (Global.nipman).cacheB, Direction Towards((Global.nipman).cacheB, Add(Global.missilePos, Vector(0, 2, 0))), To World, Damage, Team 1, 1, 1, 10, Sombra EMP Explosion Effect, DVa Self Destruct Explosion Sound, 1, 100, 0.5, 20, 0, 0);
            Wait(Multiply(0.012, Distance Between((Global.nipman).cacheA, Global.missilePos)), Ignore Condition);
            "playEffect(getAllPlayers(), DynamicEffect.HANZO_SONIC_ARROW_INITIAL_PULSE, Color.TEAM_2, missilePos, 1)\nplayEffect(getAllPlayers(), DynamicEffect.LUCIO_SOUND_BARRIER_CAST, Color.TEAM_2, missilePos, 1)"
            Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Team 2), Global.missilePos, 1);
            Play Effect(All Players(All Teams), Lúcio Sound Barrier Cast Effect, Color(Team 2), Global.missilePos, 1);
            Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(Team 2), Global.missilePos, 400);
            Destroy Effect(First Of(Global.missileFx));
            Set Global Variable(missileFx, Empty Array);
            Set Global Variable(missileTemp, Total Time Elapsed);
            Wait(0.016, Ignore Condition);
            Create Projectile Effect(All Players(All Teams), Zarya Particle Cannon, Null, Add(Global.missilePos, Vector(0, -10, 0)), Up, 1, Visible To);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Create Effect(All Players(All Teams), Ring, Color(Team 2), Global.missilePos, 10, Visible To);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Global.missilePos, Add(Global.missilePos, Multiply(Min(16, Multiply(20, Subtract(Total Time Elapsed, Global.missileTemp))), Up)), Color(Team 2), Visible To Position and Radius);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Add(Global.missilePos, Vector(0, 12, 0)), Add(Add(Global.missilePos, Vector(0, 12, 0)), Multiply(Min(4, Max(0.01, Multiply(20, Subtract(Subtract(Total Time Elapsed, Global.missileTemp), 0.6)))), Left)), Color(Team 2), Visible To Position and Radius);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Add(Global.missilePos, Vector(0, 12, 0)), Add(Add(Global.missilePos, Vector(0, 12, 0)), Multiply(Min(4, Max(0.01, Multiply(20, Subtract(Subtract(Total Time Elapsed, Global.missileTemp), 0.6)))), Right)), Color(Team 2), Visible To Position and Radius);
            Modify Global Variable(missileFx, Append To Array, Last Created Entity);
            "start damage while eva anim plays"
            For Global Variable(missileTemp, 0, 20, 1);
                Damage(Players Within Radius(Global.missilePos, 10, Team 1, Off), Null, 30);
                Set Status(Players Within Radius(Global.missilePos, 10, Team 1, Off), Null, Burning, 0.16);
                Wait(0.112, Ignore Condition);
            End;
            For Global Variable(missileTemp, 2, Count Of(Global.missileFx), 1);
                Destroy Effect(Value In Array(Global.missileFx, Global.missileTemp));
            End;
            Set Global Variable(missileFx, Array Slice(Global.missileFx, 0, 2));
            "dot"
            For Global Variable(missileTemp, 0, 50, 1);
                Damage(Players Within Radius(Global.missilePos, 10, Team 1, Off), Null, 30);
                Set Status(Players Within Radius(Global.missilePos, 10, Team 1, Off), Null, Burning, 0.16);
                Wait(0.128, Ignore Condition);
                If(Compare(Global.obj, ==, -1));
                    Break;
                End;
            End;
            For Global Variable(missileTemp, 0, Count Of(Global.missileFx), 1);
                Destroy Effect(Value In Array(Global.missileFx, Global.missileTemp));
            End;
            Set Global Variable(missileFx, Empty Array);
        End;
    }
}

rule ("make ice") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 2) == True;
    }
    actions {
        "createProjectileEffect(getAllPlayers(), Projectile.MEI_ICICLE, null, threatVar1, directionTowards(threatVar1, target1), 0.5, ProjectileEffectReeval.VISIBILITY_POSITION_DIRECTION_AND_SIZE)\nthreatFx.append(getLastCreatedEntity())"
        While(Compare(Global.obj, !=, -1));
            Wait(9, Ignore Condition);
            Set Global Variable(target1, Random Value In Array(All Living Players(Team 1)));
            Set Global Variable(target2, Random Value In Array(All Living Players(Team 1)));
            Create Projectile(Mei Icicle, Global.nipman, (Global.nipman).cacheA, Direction Towards((Global.nipman).cacheA, Global.target1), To World, Damage, Team 1, 70, 1, 1, Tracer Recall Reappear Effect, Sigma Hypersphere Implosion Sound, 0.2, 20, 10, 0, 0, 0);
            Wait(0.36, Ignore Condition);
            Create Projectile(Mei Icicle, Global.nipman, (Global.nipman).cacheB, Direction Towards((Global.nipman).cacheB, Global.target2), To World, Damage, Team 1, 70, 1, 1, Tracer Recall Reappear Effect, Sigma Hypersphere Implosion Sound, 0.2, 20, 10, 0, 0, 0);
        End;
    }
}

rule ("ice impact") {
    event {
        Player Took Damage;
        Team 1;
        All;
    }
    conditions {
        Event Ability == Null;
        Attacker == Global.nipman;
        Array Contains(Global.threatList, 2) == True;
    }
    actions {
        Set Status(Victim, Global.nipman, Frozen, 1.2);
    }
}

rule ("ice effect init") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 2) == True;
        Or(Compare(Event Player, ==, Global.nipman), And(Array Contains(Global.objPos, Event Player), Compare(Global.obj, ==, 1))) == True;
    }
    actions {
        Wait Until(Compare((Event Player).cacheA, !=, Null), 3);
        Create Projectile Effect(All Players(All Teams), Mei Icicle, Null, (Event Player).cacheA, Facing Direction Of(Event Player), 0.5, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(All Players(All Teams), Mei Icicle, Null, (Event Player).cacheB, Facing Direction Of(Event Player), 0.5, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
    }
}

disabled rule ("feetpples TOO MANY") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 16) == True;
        Or(Compare((Event Player).cacheA, ==, (Global.nipman).cacheA), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
    }
    actions {
        Wait(0.48, Abort When False);
        Create Dummy Bot(Hero(Sigma), Team 2, -1, Up, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, botA, Last Created Entity);
        Set Facing((Event Player).botA, Facing Direction Of(Event Player), To World);
        Set Facing((Event Player).botB, Vector(0.34, 0.14, 0.93), To Player);
        Modify Global Variable(threatToes, Append To Array, (Event Player).botA);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position((Event Player).botA), Add(Eye Position((Event Player).botA), Multiply(80, Facing Direction Of((Event Player).botA))), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Sigma), Team 2, -1, Up, Backward);
        Set Player Variable(Event Player, botB, Last Created Entity);
        Set Facing((Event Player).botB, Facing Direction Of(Event Player), To World);
        Set Facing((Event Player).botB, Vector(0.34, 0.14, 0.93), To Player);
        Modify Global Variable(threatToes, Append To Array, (Event Player).botB);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position((Event Player).botB), Add(Eye Position((Event Player).botB), Multiply(80, Facing Direction Of((Event Player).botB))), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Set Status(Global.threatToes, Null, Phased Out, 99999);
        Start Scaling Player(Global.threatToes, 4, False);
        Wait(0.48, Ignore Condition);
        Start Forcing Player Position((Event Player).botB, Add((Event Player).cacheB, Vector(0, -0.5, 0)), False);
        Start Forcing Player Position((Event Player).botA, Add((Event Player).cacheA, Vector(0, -0.5, 0)), False);
    }
}

rule ("dupe ice") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 1;
        Array Contains(Global.threatList, 2) == True;
    }
    actions {
        While(Compare(Global.obj, !=, -1));
            Wait(9, Ignore Condition);
            "share target\nmust be owned by main mauga to apply freeze"
            Create Projectile(Mei Icicle, Global.nipman, (Value In Array(Global.objPos, Modulo(Total Time Elapsed, Count Of(Global.objPos)))).cacheA, Direction Towards((Value In Array(Global.objPos, Modulo(Total Time Elapsed, Count Of(Global.objPos)))).cacheA, Global.target1), To World, Damage, Team 1, 20, 1, 1, Tracer Recall Reappear Effect, Sigma Hypersphere Implosion Sound, 0.2, 20, 10, 0, 0, 0);
            Wait(0.36, Ignore Condition);
            Create Projectile(Mei Icicle, Global.nipman, (Value In Array(Global.objPos, Modulo(Total Time Elapsed, Count Of(Global.objPos)))).cacheB, Direction Towards((Value In Array(Global.objPos, Modulo(Total Time Elapsed, Count Of(Global.objPos)))).cacheB, Global.target2), To World, Damage, Team 1, 20, 1, 1, Tracer Recall Reappear Effect, Sigma Hypersphere Implosion Sound, 0.2, 20, 10, 0, 0, 0);
        End;
    }
}

rule ("dupe boolet") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj == 1;
        Array Contains(Global.threatList, 18) == True;
        Array Contains(Global.objPos, Event Player) == True;
    }
    actions {
        "print(\"bullet dupe run\")"
        While(Compare(Global.obj, ==, 1));
            Wait(0.36, Ignore Condition);
            "smallMessage(hostPlayer, eventPlayer.smallRNip)"
            Create Projectile(Mercy Caduceus Blaster, Event Player, Vector(5.399999999999999, 20.565, 3.99), Vector(Multiply(Sine From Radians(Total Time Elapsed), -12), -0.5, 9), To Player, Damage, Team 1, 50, 1, 0, Bad Explosion, Ashe Dynamite Explosion Sound, 0.03, 20, 3, 0, 0, 0);
            Create Projectile(Orisa Fusion Driver, Event Player, Vector(-2.055, 20.669999999999998, 6.99), Vector(Multiply(Sine From Radians(Total Time Elapsed), 12), -0.5, 9), To Player, Damage, Team 1, 50, 1, 0, Bad Explosion, Ashe Dynamite Explosion Sound, 0.03, 20, 3, 0, 0, 0);
        End;
    }
}

rule ("dupe + normal sniper") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 16) == True;
        Or(And(Compare((Event Player).cacheA, ==, (Global.nipman).cacheA), Compare(Event Player, ==, Global.nipman)), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
    }
    actions {
        Wait(Multiply(0.048, Index Of Array Value(Global.objPos, Event Player)), Ignore Condition);
        Create Dummy Bot(Hero(Widowmaker), Team 2, -1, Up, Facing Direction Of(Event Player));
        Set Player Variable(Event Player, botA, Last Created Entity);
        Start Facing((Event Player).botA, Direction Towards(Eye Position((Event Player).botA), Eye Position(((Event Player).botA).mobTarget)), 5, To World, Direction and Turn Rate);
        Modify Global Variable(threatSnipers, Append To Array, (Event Player).botA);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position((Event Player).botA), Add(Eye Position((Event Player).botA), Multiply(60, Facing Direction Of((Event Player).botA))), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Widowmaker), Team 2, -1, Up, Backward);
        Set Player Variable(Event Player, botB, Last Created Entity);
        Start Facing((Event Player).botB, Direction Towards(Eye Position((Event Player).botB), Eye Position(((Event Player).botB).mobTarget)), 5, To World, Direction and Turn Rate);
        Modify Global Variable(threatSnipers, Append To Array, (Event Player).botB);
        Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position((Event Player).botB), Add(Eye Position((Event Player).botB), Multiply(60, Facing Direction Of((Event Player).botB))), Color(Team 2), Visible To Position and Radius);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Start Holding Button(Global.threatSnipers, Button(Secondary Fire));
        Start Forcing Dummy Bot Name(Global.threatSnipers, Value In Array(Array(Custom String("s-nip-ers"), Custom String("젖-격수"), Custom String("狙挤手")), (Global.nipman).__languageIndex__));
        Set Status(Global.threatSnipers, Null, Phased Out, 9999);
        Start Scaling Player(Global.threatSnipers, 0.1, False);
        Disable Nameplates(Global.threatSnipers, All Players(All Teams));
        Wait(0.48, Ignore Condition);
        Start Forcing Player Position((Event Player).botB, (Event Player).cacheB, False);
        Start Forcing Player Position((Event Player).botA, (Event Player).cacheA, False);
    }
}

rule ("sniper change target") {
    event {
        Ongoing - Each Player;
        Team 2;
        Widowmaker;
    }
    actions {
        While(Compare(Global.obj, !=, -1));
            Set Player Variable(Event Player, mobTarget, Random Value In Array(Filtered Array(All Living Players(Team 1), Has Spawned(Current Array Element))));
            Set Ammo(Event Player, 0, 9999);
            Wait(12, Ignore Condition);
        End;
    }
}

rule ("sniper target dead") {
    event {
        Ongoing - Each Player;
        Team 2;
        Widowmaker;
    }
    actions {
        While(Compare(Global.obj, !=, -1));
            Wait(2, Ignore Condition);
            If(Not(And(Is Alive((Event Player).mobTarget), Entity Exists((Event Player).mobTarget))));
                Set Player Variable(Event Player, mobTarget, Random Value In Array(All Living Players(Team 1)));
            End;
        End;
    }
}

rule ("sniper fire") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 16) == True;
    }
    actions {
        Wait(1.504, Ignore Condition);
        Set Damage Dealt(Global.threatSnipers, Divide(180, Number Of Heroes(Hero(Widowmaker), Team 2)));
        Press Button(Global.threatSnipers, Button(Primary Fire));
        Disable Nameplates(Global.threatSnipers, All Players(All Teams));
        Loop If Condition Is True;
    }
}

rule ("init suns") {
    event {
        Ongoing - Each Player;
        All;
        Mauga;
    }
    conditions {
        Global.obj != -1;
        Array Contains(Global.threatList, 20) == True;
        Or(Compare((Event Player).cacheA, ==, (Global.nipman).cacheA), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player))) == True;
    }
    actions {
        Create Dummy Bot(Hero(Illari), Team 2, -1, (Event Player).cacheA, Down);
        Modify Global Variable(threatSuns, Append To Array, Last Created Entity);
        Set Player Variable(Event Player, botA, Last Created Entity);
        Create Dummy Bot(Hero(Illari), Team 2, -1, (Event Player).cacheB, Down);
        Modify Global Variable(threatSuns, Append To Array, Last Created Entity);
        Set Player Variable(Event Player, botB, Last Created Entity);
        Start Forcing Player Position((Event Player).botA, (Event Player).cacheA, False);
        Start Forcing Player Position((Event Player).botB, (Event Player).cacheB, False);
        Wait(0.64, Ignore Condition);
        "eventPlayer.threatDecor = []"
        Create Projectile Effect(If-Then-Else(Array Contains(Global.threatList, 20), All Players(All Teams), Empty Array), Reinhardt Fire Strike, Null, (Event Player).cacheA, Facing Direction Of(Event Player), 0, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
        Create Projectile Effect(If-Then-Else(Array Contains(Global.threatList, 20), All Players(All Teams), Empty Array), Reinhardt Fire Strike, Null, (Event Player).cacheB, Facing Direction Of(Event Player), 0.02, Visible To);
        Modify Global Variable(threatFx, Append To Array, Last Created Entity);
    }
}

rule ("Subroutine moreMaugasSetup") {
    event {
        Subroutine;
        moreMaugasSetup;
    }
    actions {
        Set Global Variable(objPos, Empty Array);
        "need to keep them far away or the fingers block the weak spots"
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Multiply(Up, Max Health(Global.nipman)), Left);
        Modify Global Variable(objPos, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Multiply(Up, Max Health(Global.nipman)), Right);
        Modify Global Variable(objPos, Append To Array, Last Created Entity);
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Multiply(Up, Max Health(Global.nipman)), Forward);
        Modify Global Variable(objPos, Append To Array, Last Created Entity);
        Set Gravity(Global.objPos, 0);
        Wait(0.016, Ignore Condition);
        Start Scaling Player(Global.objPos, 15, False);
        Disable Movement Collision With Players(Global.objPos);
        Disable Movement Collision With Environment(Global.objPos, True);
        Set Knockback Received(Global.objPos, 0);
        Set Max Health(Global.objPos, Absolute Value(2000));
        Wait(0.12, Ignore Condition);
        Heal(Global.objPos, Null, 99999);
        Set Healing Dealt(Global.objPos, 0);
        For Global Variable(iMores, 0, 3, 1);
            Wait(0.016, Ignore Condition);
            Start Forcing Player Position(Value In Array(Global.objPos, Global.iMores), Value In Array(Array(Vector(-31, -18, 0), Vector(31, -18, 0), Vector(0, -18, -31)), Global.iMores), False);
            "LOAD BEARING WAIT. NEEDS TO BE THIS LONG AT LEAST"
            Wait(0.096, Ignore Condition);
            Set Player Variable(Value In Array(Global.objPos, Global.iMores), cacheA, World Vector Of(Vector(5.399999999999999, 20.565, 3.99), Value In Array(Global.objPos, Global.iMores), Rotation And Translation));
            Set Player Variable(Value In Array(Global.objPos, Global.iMores), cacheB, World Vector Of(Vector(-2.055, 20.669999999999998, 6.99), Value In Array(Global.objPos, Global.iMores), Rotation And Translation));
            Start Forcing Dummy Bot Name(Value In Array(Global.objPos, Global.iMores), Value In Array(Array(Custom String("mauga jr."), Custom String("마우가 JR."), Custom String("小毛加")), (Global.nipman).__languageIndex__));
            "WHY IS IT 400. IT SHOULD BE 100 BUT THAT MAKES IT WRONG evalOnce(objPos[iMores]).getNormalizedHealth() * 400"
            Create Progress Bar In-World Text(All Players(All Teams), Multiply(Divide(Health(Evaluate Once(Value In Array(Global.objPos, Global.iMores))), Evaluate Once(Round To Integer(Max Health(Value In Array(Global.objPos, Global.iMores)), Up))), 100), Custom String("{0} / {1} HP", Round To Integer(Health(Evaluate Once(Value In Array(Global.objPos, Global.iMores))), Up), Evaluate Once(Round To Integer(Max Health(Value In Array(Global.objPos, Global.iMores)), Up))), Add(Eye Position(Value In Array(Global.objPos, Global.iMores)), Vector(0, 2, 0)), 1, Do Not Clip, Color(Red), Color(White), Visible To and Values, Default Visibility);
            Set Player Variable(Value In Array(Global.objPos, Global.iMores), cacheC, Last Text ID);
            Modify Global Variable(threatFx, Append To Array, Last Text ID);
        End;
        Wait(0.8, Ignore Condition);
        Set Status(Global.objPos, Null, Frozen, 99999);
        Wait(0.8, Ignore Condition);
        Set Status(Global.objPos, Null, Frozen, 99999);
        Heal(Global.objPos, Null, 99999);
    }
}

rule ("missing maugas") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 1;
        Is True For All(Global.objPos, Not(Entity Exists(Current Array Element))) == True;
    }
    actions {
        Wait(2, Abort When False);
        Call Subroutine(moreMaugasSetup);
        Wait(2, Abort When False);
        Small Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒsomething went wrong. skipping phase...무언가가 잘못되었다, 페이즈 스킵 중...游戏错误。"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        Set Global Variable(objProg, Global.objGoal);
        Wait(2, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("NO BOTS?") {
    event {
        Ongoing - Global;
    }
    conditions {
        "slendy is also a mob so don't check for empty arr"
        Or(Or(Compare(Global.obj, ==, 2), Compare(Global.obj, ==, 4)), Compare(Global.obj, ==, 3)) == True;
        Number Of Players(Team 2) < 7;
    }
    actions {
        Wait(4, Abort When False);
        For Global Variable(i, 0, Number Of Players(Team 2), 1);
            If(Compare(Value In Array(All Players(Team 2), Global.i), !=, Global.nipman));
                Destroy Dummy Bot(Team 2, Slot Of(Value In Array(All Players(Team 2), Global.i)));
            End;
        End;
        Set Global Variable(mobs, Empty Array);
        Call Subroutine(mobsInit);
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("more maugas") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 1;
    }
    actions {
        Wait(0.016, Ignore Condition);
        Call Subroutine(moreMaugasSetup);
    }
}

rule ("miniboss") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 3;
    }
    actions {
        "hero must be same as mobs for skin limit"
        Wait(0.64, Ignore Condition);
        Create Dummy Bot(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), Team 2, -1, Vector(0, 50, 0), Backward);
        Set Global Variable(objPos, Last Created Entity);
        Set Knockback Received(Global.objPos, 10);
        Set Move Speed(Global.objPos, 40);
        Start Scaling Player(Global.objPos, 3, False);
        If(Compare(Hero Of(Global.objPos), ==, Hero(Winston)));
            Set Damage Dealt(Global.objPos, 55);
        End;
        Start Forcing Throttle(Global.objPos, 1, 1, 0, 0, 0, 1);
        Start Forcing Dummy Bot Name(Global.objPos, Value In Array(Array(Custom String("miniboss"), Custom String("미니보스"), Custom String("大怪物")), (Global.nipman).__languageIndex__));
        Start Facing(Global.objPos, Direction Towards(Position Of(Global.objPos), Position Of((Global.objPos).mobTarget)), 400, To World, Direction and Turn Rate);
        If(Compare(Hero Of(Global.objPos), ==, Hero(Mauga)));
            Set Max Health(Global.objPos, Absolute Value(1200));
            Set Damage Dealt(Global.objPos, 35);
        Else;
            Set Max Health(Global.objPos, If-Then-Else(Array Contains(All Tank Heroes, Hero Of(Global.objPos)), 3500, 4500));
        End;
        Wait(2, Ignore Condition);
        "laggy i think"
        Disable Movement Collision With Players(Global.objPos);
        "objPos.disableEnvironmentCollision(false)"
        Wait Until(Is On Ground(Global.objPos), 4);
        Set Status(Global.objPos, Null, Knocked Down, 2);
        If(Compare(Value In Array(Global.enemies, Modulo(Global.roundNo, Count Of(Global.enemies))), !=, Hero(Mauga)));
            Start Holding Button(Global.objPos, Button(Primary Fire));
        End;
        While(Compare(Global.obj, ==, 3));
            "objPos.getNormalizedHealth()"
            Set Global Variable(objProg, Subtract(1, Divide(Health(Global.objPos), Max Health(Global.objPos))));
            Wait(0.24, Ignore Condition);
        End;
    }
}

rule ("clean bots") {
    event {
        Ongoing - Each Player;
        Team 2;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Event Player != Global.nipman;
        Global.obj == -1;
    }
    actions {
        If(Entity Exists((Event Player).cacheC));
            Destroy Progress Bar In-World Text((Event Player).cacheC);
        End;
        Destroy Dummy Bot(Team 2, Slot Of(Event Player));
    }
}

rule ("setup & refresh forest") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 0;
    }
    actions {
        Wait(1.5, Abort When False);
        For Global Variable(i, 0, 7, 1);
            Create Dummy Bot(Hero(Lifeweaver), Team 2, -1, Up, Down);
            Start Modifying Hero Voice Lines(Last Created Entity, Add(0.5, Multiply(Global.i, 0.142857142857142)), False);
            Wait(0.032, Ignore Condition);
            If(Compare(Number Of Heroes(Hero(Lifeweaver), Team 2), >, 7));
                Break;
            End;
        End;
        Set Status(Players On Hero(Hero(Lifeweaver), Team 2), Null, Phased Out, 9999);
        Set Invisible(Players On Hero(Hero(Lifeweaver), Team 2), Enemies);
        Set Healing Dealt(Players On Hero(Hero(Lifeweaver), Team 2), 30);
        Wait(1.2, Ignore Condition);
        While(Compare(Global.obj, ==, 0));
            If(Compare(Players On Hero(Hero(Lifeweaver), Team 2), ==, Empty Array));
                For Global Variable(i, 0, Number Of Heroes(Hero(Lifeweaver), Team 2), 1);
                    Destroy Dummy Bot(Team 2, Value In Array(Players On Hero(Hero(Lifeweaver), Team 2), Global.i));
                    Wait(0.096, Ignore Condition);
                End;
                Loop;
            End;
            Set Ultimate Charge(All Players(Team 2), 100);
            Wait(0.08, Ignore Condition);
            Press Button(Players On Hero(Hero(Lifeweaver), Team 2), Button(Ultimate));
            Set Facing(Players On Hero(Hero(Lifeweaver), Team 2), Down, To World);
            Wait(0.016, Ignore Condition);
            For Global Variable(i, 0, 7, 1);
                Teleport(Value In Array(Players On Hero(Hero(Lifeweaver), Team 2), Global.i), Vector(Random Real(-18, 18), 6, Random Real(-18, 18)));
                "while distance(objPos, getPlayersOnHero(Hero.LIFEWEAVER, Team.2)[i]) < 4:\ngetPlayersOnHero(Hero.LIFEWEAVER, Team.2)[i].teleport(vect(random.randint(-18,18),5,random.randint(-18,18)))\nwait()"
                Wait(0.016, Ignore Condition);
            End;
            Wait(0.08, Ignore Condition);
            Press Button(Players On Hero(Hero(Lifeweaver), Team 2), Button(Primary Fire));
            Wait(0.44, Ignore Condition);
            Set Status(Players On Hero(Hero(Lifeweaver), Team 2), Null, Hacked, 0.5);
            Wait(14, Abort When False);
        End;
    }
}

rule ("place objective") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 4;
    }
    actions {
        Set Global Variable(objPos, Vector(Random Integer(-13, 13), 0, Random Integer(-13, 13)));
        Wait(0.016, Ignore Condition);
        Loop If(And(Compare(Z Component Of(Global.objPos), <, -4), Array Contains(Global.threatList, 8)));
    }
}

rule ("kill/obj prog/weak spot + respawn timer") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
        Event Player != Global.nipman;
    }
    actions {
        If(Array Contains(Global.weakSpots, Event Player));
            Modify Global Variable(weakSpots, Remove From Array By Value, Event Player);
            Play Effect(All Players(All Teams), Sombra Translocator Reappear Effect, Color(Team 2), Event Player, 1);
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 2), Event Player, 50);
            Wait(0.48, Ignore Condition);
            Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
            Abort;
        End;
        Heal(Attacker, Event Player, 50);
        If(Array Contains(Global.threatList, 12));
            Play Effect(All Players(All Teams), Moira Fade Reappear Effect, Color(Team 2), Add(Position Of(Event Player), Up), 1);
            Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Sound, Color(Team 2), Add(Position Of(Event Player), Up), 10);
            Damage(Players Within Radius(Position Of(Event Player), 2, Team 1, Surfaces And Enemy Barriers), Event Player, 90);
        End;
        If(Compare(Global.obj, ==, 0));
            Set Respawn Max Time(Event Player, 7);
            Modify Global Variable(objProg, Add, 0.5);
            Abort;
        Else If(Compare(Global.obj, ==, 2));
            Modify Global Variable(objProg, Add, 1);
            Modify Team Score(Team 1, 1);
            Set Team Score(Team 1, 0);
            Set Respawn Max Time(Event Player, 2);
            Abort;
        Else If(And(Compare(Global.obj, ==, 3), Compare(Event Player, ==, Global.objPos)));
            Set Global Variable(objProg, Global.objGoal);
        Else If(And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Event Player)));
            If(Compare(Event Player, ==, Global.attackingClone));
                Kill(Global.weakSpots, Null);
                Destroy Effect(Global.moreFx);
                Set Global Variable(moreFx, Empty Array);
                Set Global Variable(attackingClone, Null);
            End;
            Modify Global Variable(objProg, Add, 1);
            Destroy Dummy Bot(Team Of((Event Player).botA), Slot Of((Event Player).botA));
            Destroy Dummy Bot(Team Of((Event Player).botB), Slot Of((Event Player).botB));
            Modify Global Variable(objPos, Remove From Array By Value, Event Player);
            Destroy Progress Bar In-World Text((Event Player).cacheC);
            Disable Built-In Game Mode Respawning(Event Player);
            Wait(1.2, Ignore Condition);
            Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
        End;
        Set Respawn Max Time(Event Player, 1.8);
    }
}

rule ("point") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.obj == 4;
    }
    actions {
        If(Compare(Players Within Radius(Global.objPos, 12, Team 1, Off), !=, Empty Array));
            Modify Global Variable(objProg, Add, Multiply(Divide(Count Of(Players Within Radius(Global.objPos, 12, Team 1, Off)), Number Of Players(Team 1)), 3));
            Play Effect(All Players(All Teams), Ring Explosion, Color(Team 1), Add(Global.objPos, Vector(0, -0.3, 0)), 25);
            Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Color(Team 1), Global.objPos, 150);
        End;
        Wait(0.64, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("page found") {
    event {
        Ongoing - Each Player;
        Team 1;
        All;
    }
    conditions {
        Global.obj == 0;
        Is Dummy Bot(Event Player) == False;
        Distance Between(Event Player, Global.objPos) < 1.3;
    }
    actions {
        Small Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒ {0} found a page!  {0}(이)가 페이지를 찾았다! {0}找到了一页纸！", Event Player), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
        Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Global.objPos, 65);
        Play Effect(All Players(All Teams), Good Explosion, Color(Team 1), Global.objPos, 1);
        "sound"
        Modify Team Score(Team 1, 1);
        Set Team Score(Team 1, 0);
        Modify Global Variable(objProg, Add, 1);
        Set Global Variable(objPos, Vector(Random Integer(-18, 18), 0, Random Integer(If-Then-Else(Array Contains(Global.threatList, 8), -4, -18), 16)));
    }
}

rule ("flava fla") {
    event {
        Ongoing - Global;
    }
    actions {
        Wait(Random Real(6, 12), Ignore Condition);
        If(Compare(Random Integer(0, 1), ==, 1));
            Communicate(Random Value In Array(All Living Players(Team 2)), Hello);
        Else;
            Communicate(Random Value In Array(All Living Players(Team 2)), Voice Line Up);
    }
}

rule ("wrong mauga") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    conditions {
        Victim == Global.nipman;
    }
    actions {
        If(Compare(Global.obj, ==, -1));
            Wait(Match Time, Ignore Condition);
        End;
        Modify Player Variable(Event Player, cacheA, Add, 1);
        If(Compare((Event Player).cacheA, >, 6));
            Set Player Variable(Event Player, cacheA, 0);
            Communicate(Event Player, No);
            Small Message(Event Player, Custom String("  {0} {1} {2}", Icon String(X), Hero(Mauga), String("Protected")));
            Play Effect(Event Player, Brigitte Repair Pack Armor Effect, Color(Team 1), Global.nipman, True);
            Wait(10, Ignore Condition);
        End;
        "min delay between events"
        Wait(0.24, Ignore Condition);
        "reset counter when not shooting for some time"
        Wait(1.8, Restart When True);
        Set Player Variable(Event Player, cacheA, 0);
    }
}

rule ("rez cd if not hardcore") {
    event {
        Ongoing - Global;
    }
    actions {
        Wait(2, Ignore Condition);
        If(Compare(Global.hardcoreLevel, ==, 0));
            While(True);
                Set Ability Cooldown(Players On Hero(Hero(Mercy), Team 1), Button(Ability 2), 0);
                Wait(1, Ignore Condition);
            End;
    }
}

rule ("player count balancing, freeze & nip pos check") {
    event {
        Ongoing - Global;
    }
    actions {
        While(True);
            Wait(1, Ignore Condition);
            If(Workshop Setting Toggle(Custom String("gameplay | 게임플레이"), Custom String("increase player damage per missing player 󠁼 없는 플레이어당 주는 대미지 증가"), True, 0));
                "getPlayers(Team.1).setDamageDealt(100 + (20 * (9 - getNumberOfPlayers(Team.1))))"
                Set Damage Dealt(All Players(Team 1), Min(350, Divide(900, Count Of(Filtered Array(All Players(Team 1), Has Spawned(Current Array Element))))));
            End;
            If(Compare(Global.obj, !=, -1));
                Set Status(Global.nipman, Null, Frozen, 99999);
                Set Damage Received(Global.nipman, 0.001);
                If(Compare(Global.obj, ==, 1));
                    If(Is True For All(Global.objPos, Not(Has Status(Current Array Element, Stunned))));
                        Set Status(Global.objPos, Null, Frozen, 99999);
                    End;
                End;
            End;
            "if nipman.smallLNip.y <= 4 or nipman.smallRNip.y <= 4:"
            Set Player Variable(Global.nipman, cacheA, Vector(2.93, 8.04, 26.15));
            Set Player Variable(Global.nipman, cacheB, Vector(-7.19, 8, 30.27));
            Wait(4, Ignore Condition);
        End;
    }
}

rule ("wake up") {
    event {
        Ongoing - Each Player;
        Team 2;
        Mauga;
    }
    conditions {
        Has Status(Event Player, Knocked Down) == True;
    }
    actions {
        Clear Status(Event Player, Knocked Down);
        Wait(0.112, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("get up") {
    event {
        Ongoing - Each Player;
        Team 2;
        Mauga;
    }
    conditions {
        Has Status(Event Player, Asleep) == True;
    }
    actions {
        Clear Status(Event Player, Asleep);
        Wait(0.112, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("anti crash on") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.antiCrashOn == False;
        Server Load > 235;
    }
    actions {
        Wait(0.8, Abort When False);
        Set Slow Motion(50);
        "smallMessage(getAllPlayers(), \"server load high. anti crash on.\")"
        Set Global Variable(antiCrashOn, True);
    }
}

rule ("anti crash off") {
    event {
        Ongoing - Global;
    }
    conditions {
        Global.antiCrashOn != False;
        Server Load < 200;
    }
    actions {
        Wait(0.16, Abort When False);
        Set Slow Motion(100);
        Set Global Variable(antiCrashOn, False);
        Loop If Condition Is True;
    }
}

rule ("where did he go") {
    event {
        Ongoing - Global;
    }
    conditions {
        Entity Exists(Global.nipman) == False;
    }
    actions {
        Wait(5, Abort When False);
        Create Dummy Bot(Hero(Mauga), Team 2, -1, Up, Backward);
        Set Global Variable(nipman, Last Created Entity);
        Start Forcing Player Position(Global.nipman, Vector(0, -19.8, 35), False);
        Start Facing(Global.nipman, Backward, 999, To World, None);
        Disable Movement Collision With Players(Global.nipman);
        Start Scaling Player(Global.nipman, 50, False);
        Set Global Variable(upto, Max Health(Global.nipman));
        Wait(0.08, Ignore Condition);
        Set Max Health(Global.nipman, Absolute Value(10000));
        "kill(nipman, null) # this is to fill hp and reset his pose"
        Set Knockback Received(Global.nipman, 0);
        Disable Built-In Game Mode Completion;
        Disable Built-In Game Mode Music;
        Disable Built-In Game Mode Scoring;
        Heal(Global.nipman, Null, 999999);
        Wait(0.016, Ignore Condition);
        Set Healing Received(Global.nipman, 0);
        Wait(0.016, Ignore Condition);
        Set Player Health(Global.nipman, Global.nipmanLastHP);
        Wait(1, Abort When False);
        Loop If Condition Is True;
    }
}

rule ("charge no breaky") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Is Using Ability 1(Event Player) == True;
        Z Component Of(Position Of(Event Player)) > 17;
        Z Component Of(Facing Direction Of(Event Player)) > -0.7;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Cancel Primary Action(Event Player);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

rule ("charge no breaky more maugas") {
    event {
        Ongoing - Each Player;
        All;
        Reinhardt;
    }
    conditions {
        Global.obj == 1;
        Is Using Ability 1(Event Player) == True;
        Or(Or(And(Compare(Z Component Of(Position Of(Event Player)), <, -17), Compare(Z Component Of(Facing Direction Of(Event Player)), <, 0.7)), And(Compare(X Component Of(Position Of(Event Player)), <, -17), Compare(X Component Of(Facing Direction Of(Event Player)), <, 0.7))), And(Compare(X Component Of(Position Of(Event Player)), >, 17), Compare(X Component Of(Facing Direction Of(Event Player)), >, -0.7))) == True;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Cancel Primary Action(Event Player);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

rule ("echo charge no breaky") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Reinhardt);
        Is Using Ability 1(Event Player) == True;
        Z Component Of(Position Of(Event Player)) > 18;
        Z Component Of(Facing Direction Of(Event Player)) > -0.7;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Cancel Primary Action(Event Player);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

rule ("echo charge no breaky more maugas") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Reinhardt);
        Global.obj == 1;
        Is Using Ability 1(Event Player) == True;
        Or(Or(And(Compare(Z Component Of(Position Of(Event Player)), <, -18), Compare(Z Component Of(Facing Direction Of(Event Player)), <, 0.7)), And(Compare(X Component Of(Position Of(Event Player)), <, -18), Compare(X Component Of(Facing Direction Of(Event Player)), <, 0.7))), And(Compare(X Component Of(Position Of(Event Player)), >, 18), Compare(X Component Of(Facing Direction Of(Event Player)), >, -0.7))) == True;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Cancel Primary Action(Event Player);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

disabled rule ("punch no breaky") {
    event {
        Ongoing - Each Player;
        All;
        Doomfist;
    }
    conditions {
        Global.obj != -1;
        Is Firing Secondary(Event Player) == True;
        Z Component Of(Position Of(Event Player)) > 15;
        Z Component Of(Facing Direction Of(Event Player)) > 0;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

disabled rule ("hook no breaky") {
    event {
        Ongoing - Each Player;
        All;
        Roadhog;
    }
    conditions {
        Global.obj != -1;
        Is Using Ability 1(Event Player) == True;
        Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(35, Facing Direction Of(Event Player))), All Players(Team 2), Players On Hero(Hero(Lifeweaver), Team 2), True) == Global.nipman;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒdo not the mauga마우가 끌고우가지 마시오do not the mauga"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
    }
}

rule ("flux no breaky") {
    event {
        Player Dealt Damage;
        All;
        Sigma;
    }
    conditions {
        Event Ability == Button(Ultimate);
        Or(Compare(Victim, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Victim))) == True;
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Small Message(Event Player, Custom String("do not the mauga"));
        Wait(0.8, Ignore Condition);
        Set Ultimate Charge(Event Player, 100);
    }
}

rule ("punch unbreaky") {
    event {
        Player Dealt Damage;
        All;
        Doomfist;
    }
    conditions {
        "or (obj == OBJ.MORE and victim in objPos)"
        Victim == Global.nipman;
        Global.obj != -1;
        Event Ability == Button(Secondary Fire);
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Clear Status(Victim, Frozen);
        Wait(0.48, Abort When False);
        Set Status(Victim, Null, Frozen, 9999);
    }
}

rule ("echo punch unbreaky") {
    event {
        Player Dealt Damage;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Doomfist);
        "or (obj == OBJ.MORE and victim in objPos)"
        Victim == Global.nipman;
        Global.obj != -1;
        Event Ability == Button(Secondary Fire);
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Clear Status(Victim, Frozen);
        Wait(0.48, Abort When False);
        Set Status(Victim, Null, Frozen, 9999);
    }
}

rule ("hook unbreaky") {
    event {
        Player Dealt Damage;
        All;
        Roadhog;
    }
    conditions {
        Or(Compare(Victim, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Victim))) == True;
        Global.obj != -1;
        Event Ability == Button(Ability 1);
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Clear Status(Victim, Frozen);
        Wait(0.48, Abort When False);
        Set Status(Victim, Null, Frozen, 9999);
    }
}

rule ("echo hook unbreaky") {
    event {
        Player Dealt Damage;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Roadhog);
        Or(Compare(Victim, ==, Global.nipman), And(Compare(Global.obj, ==, 1), Array Contains(Global.objPos, Victim))) == True;
        Global.obj != -1;
        Event Ability == Button(Ability 1);
    }
    actions {
        Set Status(Event Player, Null, Hacked, 0.5);
        Clear Status(Victim, Frozen);
        Wait(0.48, Abort When False);
        Set Status(Victim, Null, Frozen, 9999);
    }
}

rule ("hog ult nerf") {
    event {
        Ongoing - Each Player;
        All;
        Roadhog;
    }
    conditions {
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Set Damage Dealt(Event Player, 35);
        Wait Until(Not(Is Using Ultimate(Event Player)), 8);
        Set Damage Dealt(Event Player, 100);
    }
}

rule ("echo hog ult nerf") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Roadhog);
        Is Using Ultimate(Event Player) == True;
    }
    actions {
        Set Damage Dealt(Event Player, 35);
        Wait Until(Not(Is Using Ultimate(Event Player)), 8);
        Set Damage Dealt(Event Player, 100);
    }
}

rule ("win") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Event Player == Global.nipman;
        Attacker != Null;
    }
    actions {
        Set Slow Motion(50);
        Communicate(All Players(All Teams), Voice Line Up);
        Wait(0.48, Ignore Condition);
        Declare Team Victory(Team 1);
        Destroy All Effects;
        Set Slow Motion(100);
        Wait(3, Ignore Condition);
        Restart Match;
    }
}

disabled rule ("zarya aint slick") {
    event {
        Ongoing - Each Player;
        Team 1;
        Zarya;
    }
    conditions {
        Or(Is Using Ultimate(Event Player), And(Is Button Held(Event Player, Button(Ultimate)), Compare(Ultimate Charge Percent(Event Player), ==, 100))) == True;
    }
    actions {
        Start Damage Modification(Players On Hero(Hero(Mauga), Team 2), Event Player, 2, None);
        Set Player Variable(Event Player, mobTarget, Last Damage Modification ID);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), <, 100), 2);
        Wait(0.48, Ignore Condition);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), >, 0), 6);
        Stop Damage Modification((Event Player).mobTarget);
    }
}

disabled rule ("echo zarya aint slick") {
    event {
        Ongoing - Each Player;
        Team 1;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Zarya);
        Or(Is Using Ultimate(Event Player), And(Is Button Held(Event Player, Button(Ultimate)), Compare(Ultimate Charge Percent(Event Player), ==, 100))) == True;
    }
    actions {
        Start Damage Modification(Players On Hero(Hero(Mauga), Team 2), Event Player, 2, None);
        Set Player Variable(Event Player, mobTarget, Last Damage Modification ID);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), <, 100), 2);
        Wait(0.48, Ignore Condition);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), >, 0), 6);
        Stop Damage Modification((Event Player).mobTarget);
    }
}

rule ("sombra aint slick") {
    event {
        Ongoing - Each Player;
        Team 1;
        Sombra;
    }
    conditions {
        Or(Is Using Ultimate(Event Player), And(Is Button Held(Event Player, Button(Ultimate)), Compare(Ultimate Charge Percent(Event Player), ==, 100))) == True;
    }
    actions {
        Start Damage Modification(Players On Hero(Hero(Mauga), Team 2), Event Player, 2, None);
        Set Player Variable(Event Player, mobTarget, Last Damage Modification ID);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), <, 100), 2);
        Wait(0.48, Ignore Condition);
        Stop Damage Modification((Event Player).mobTarget);
    }
}

rule ("echo sombra aint slick") {
    event {
        Ongoing - Each Player;
        All;
        Echo;
    }
    conditions {
        Hero Being Duplicated(Event Player) == Hero(Sombra);
        Or(Is Using Ultimate(Event Player), And(Is Button Held(Event Player, Button(Ultimate)), Compare(Ultimate Charge Percent(Event Player), ==, 100))) == True;
    }
    actions {
        Start Damage Modification(Players On Hero(Hero(Mauga), Team 2), Event Player, 2, None);
        Set Player Variable(Event Player, mobTarget, Last Damage Modification ID);
        Wait Until(Compare(Ultimate Charge Percent(Event Player), <, 100), 2);
        Wait(0.48, Ignore Condition);
        Stop Damage Modification((Event Player).mobTarget);
    }
}

disabled rule ("sombra was a little slick") {
    event {
        Player Dealt Damage;
        All;
        Sombra;
    }
    conditions {
        Victim == Global.nipman;
        Or(Compare(Event Ability, ==, Button(Ultimate)), Compare(Event Damage, >, 1000)) == True;
    }
    actions {
        Set Player Health(Global.nipman, Add(Health(Global.nipman), Multiply(Event Damage, 0.7)));
    }
}

rule ("you are dead, not big surprise + chungus explode") {
    event {
        Player Died;
        Team 1;
        All;
    }
    actions {
        "smallMessage(hostPlayer, eventPlayer.scale)"
        If(Compare((Event Player).cacheC, >, 2));
            Big Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒmega milk explode!너무 성장해버렸다...mega milk explode!"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            "if checking los with 20 players isn't too expensive can turn it on"
            Damage(Players Within Radius(Position Of(Event Player), Multiply((Event Player).cacheC, 1.5), All Teams, Off), Event Player, Multiply((Event Player).cacheC, 40));
            Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(Team 1), Event Player, Multiply(15, (Event Player).cacheC));
            If(Compare((Event Player).cacheC, >, 3.5));
                Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(Team 1), Event Player, 1);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Event Player, (Event Player).cacheC);
            Else;
                Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Effect, Color(Team 1), Event Player, 1);
            End;
        End;
        Stop Scaling Player(Event Player);
        Set Player Variable(Event Player, cacheC, 1);
        Enable Movement Collision With Environment(Event Player);
        If(Compare(Global.obj, ==, -1));
            If(Not(Is Button Held(Event Player, Button(Crouch))));
                Respawn(Event Player);
                Small Message(Event Player, Value In Array(String Split(Custom String("ＴＬＥｒｒif you need to change heroes, hold crouch as you die.영웅 변경을 원하신다면, 사망 시 앉기를 누르세요.if you need to change heroes, hold c{0}", Custom String("rouch as you die.")), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
            End;
        Else;
            Modify Team Score(Team 2, 1);
        End;
        "if getPlayersOnHero(Hero.MERCY, Team.1) == []:\neventPlayer.teleport(Vector.DOWN * getTotalTimeElapsed())"
        If(Compare(Global.hardcoreLevel, >, 0));
            "eventPlayer.setRespawnTime(99999)"
            If(Compare(Filtered Array(All Players(Team 1), And(Is Alive(Current Array Element), Has Spawned(Current Array Element))), ==, Empty Array));
                Big Message(All Players(All Teams), Value In Array(String Split(Custom String("ＴＬＥｒｒgame over. all players died.게임 오버. 모든 플레이어가 사망했습니다.游戏结束。所有玩家已死亡。"), Global.__overpyTranslationHelper__), Absolute Value(Index Of Array Value(Global.__overpyTranslationHelper__, String Split(Color(White), Empty Array)))));
                Set Slow Motion(50);
                Wait(1, Ignore Condition);
                Declare Team Victory(Team 2);
                Destroy All Effects;
                Set Slow Motion(100);
                Wait(3, Ignore Condition);
                Restart Match;
            End;
        End;
        Wait Until(Is Alive(Event Player), 99999);
        If(And(Array Contains(Global.threatList, 3), Compare(Distance Between(Event Player, (First Of(Global.threatDrills)).cacheA), <, 7)));
            Teleport(Event Player, Vector(Multiply(Divide(Divide(Multiply(Multiply(X Component Of((First Of(Global.threatDrills)).cacheA), 999999999999), 999999999999), 999999999999), 10), -15), 1, Multiply(Divide(Divide(Multiply(Multiply(Z Component Of((First Of(Global.threatDrills)).cacheA), 999999999999), 999999999999), 999999999999), 10), -15)));
            Enable Movement Collision With Environment(Event Player);
        End;
        "if THREATS.CAGE in threatList and eventPlayer.getPosition().z < CageMinZ:"
        Set Status(Event Player, Null, Phased Out, 2);
    }
}

